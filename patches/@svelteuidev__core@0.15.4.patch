diff --git a/dist/components/Accordion/Accordion.stories.svelte b/dist/components/Accordion/Accordion.stories.svelte
index 80d553463edacc70579fa85e7ce15dfb9962534c..a3bce57747a154e9c691af37c6d333b13d674466 100644
--- a/dist/components/Accordion/Accordion.stories.svelte
+++ b/dist/components/Accordion/Accordion.stories.svelte
@@ -73,7 +73,7 @@ let value = 'typescript';
 </Story>
 
 <Story name="Controlled" id="accordionControlledStory">
-	<Accordion {value} on:change={(e) => (value = e.detail)}>
+	<Accordion {value} onchange={(e) => (value = e.detail)}>
 		<Accordion.Item value="typescript">
 			<div slot="control">Typescript Based</div>
 			Build type safe applications. All SvelteUI packages are built with TypeScript and support it by
diff --git a/dist/components/Accordion/Accordion.svelte.d.ts b/dist/components/Accordion/Accordion.svelte.d.ts
index a93a37626c9adcf95dea0194d36b089ea7cde1ba..0f34d268284a0c4b6732a62fb7bda28916827155 100644
--- a/dist/components/Accordion/Accordion.svelte.d.ts
+++ b/dist/components/Accordion/Accordion.svelte.d.ts
@@ -146,113 +146,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     slots: {
         default: {};
diff --git a/dist/components/Accordion/AccordionItem/AccordionItem.svelte b/dist/components/Accordion/AccordionItem/AccordionItem.svelte
index 24b6794e1cd978478380e855cc61850b8343ab55..2544240c983afa5d9720ee4df2d2cda0d9890687 100644
--- a/dist/components/Accordion/AccordionItem/AccordionItem.svelte
+++ b/dist/components/Accordion/AccordionItem/AccordionItem.svelte
@@ -1,5 +1,19 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-accordion-item',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import { getContext } from 'svelte';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 import { createEventForwarder } from '../../../internal';
 import { Box } from '../../Box';
 import { UnstyledButton } from '../../Button';
@@ -8,7 +22,9 @@ import { key } from '../key';
 import useStyles from './AccordionItem.styles';
 export let use = [], element = undefined, className = '', override = {}, value = undefined, chevron = undefined, disabled = false;
 export { className as class };
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 const ctx = getContext(key);
 function onClick() {
     $ctx.updateActive(value);
@@ -51,7 +67,7 @@ Item of an accordion.
 		id={$ctx.getRegionId(value)}
 		aria-expanded={$ctx.isItemActive(value)}
 		aria-controls={$ctx.getControlsId(value)}
-		on:click={onClick}
+		onclick={onClick}
 		use={[forwardEvents]}
 	>
 		<span
diff --git a/dist/components/Accordion/AccordionItem/AccordionItem.svelte.d.ts b/dist/components/Accordion/AccordionItem/AccordionItem.svelte.d.ts
index ce4fff239b6ce3f428b505a4b7712a091747a18d..789e7599e94ee890270b99d4a979e51ade14e6c4 100644
--- a/dist/components/Accordion/AccordionItem/AccordionItem.svelte.d.ts
+++ b/dist/components/Accordion/AccordionItem/AccordionItem.svelte.d.ts
@@ -157,117 +157,117 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement> & import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement> & import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLButtonElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLAnchorElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLButtonElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLAnchorElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement> & import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement> & import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
         download?: any;
         hreflang?: string;
         media?: string;
diff --git a/dist/components/ActionIcon/ActionIcon.svelte b/dist/components/ActionIcon/ActionIcon.svelte
index cb9db85a04a3d0eb2c6ceeb103b68fd9a9c0a07e..85e08ef44cb15c3d238a050e9803eca5605714a1 100644
--- a/dist/components/ActionIcon/ActionIcon.svelte
+++ b/dist/components/ActionIcon/ActionIcon.svelte
@@ -1,7 +1,21 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-accordion-icon',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import useStyles from './ActionIcon.styles';
 import { ActionIconErrors } from './ActionIcon.errors';
 import { createEventForwarder, useActions } from '../../internal';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 import { Box } from '../Box';
 import Loader from '../Loader/Loader.svelte';
 import Error from '../../internal/errors/Error.svelte';
@@ -11,7 +25,9 @@ export let use = [], element = undefined, className = '', override = {}, root =
     variant: 'circle'
 }, loading = false, disabled = false, href = '', external = false;
 export { className as class };
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 // --------------Error Handling-------------------
 let observable = false;
 let err;
diff --git a/dist/components/ActionIcon/ActionIcon.svelte.d.ts b/dist/components/ActionIcon/ActionIcon.svelte.d.ts
index e12bae94e86c00992c0fa2ac55271223fb44fb9f..6acfb946d4322148cdd5229f124edc50f09c844d 100644
--- a/dist/components/ActionIcon/ActionIcon.svelte.d.ts
+++ b/dist/components/ActionIcon/ActionIcon.svelte.d.ts
@@ -151,113 +151,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLButtonElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLButtonElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/ActionIcon/CloseButton/CloseButton.svelte b/dist/components/ActionIcon/CloseButton/CloseButton.svelte
index 65ca509d592404f4f1498c1c1bb7390b149a6ed7..ceda01d9aa82f393315c2f307b21453aadc42f2d 100644
--- a/dist/components/ActionIcon/CloseButton/CloseButton.svelte
+++ b/dist/components/ActionIcon/CloseButton/CloseButton.svelte
@@ -1,7 +1,21 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-close-button',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import ActionIcon from '../ActionIcon.svelte';
 import CloseIcon from './CloseIcon.svelte';
 import { createEventForwarder, useActions } from '../../../internal';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 export let use = [], element = undefined, className = '', override = {}, iconSize = 'md', root = 'button', color = 'gray', variant = 'hover', size = 'md', radius = 'sm', loaderProps = {
     size: 'xs',
     color: 'gray',
@@ -9,7 +23,9 @@ export let use = [], element = undefined, className = '', override = {}, iconSiz
 }, loading = false, disabled = false, href = '', external = false;
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 const iconSizes = {
     xs: 12,
     sm: 14,
diff --git a/dist/components/ActionIcon/CloseButton/CloseButton.svelte.d.ts b/dist/components/ActionIcon/CloseButton/CloseButton.svelte.d.ts
index c57e850e4c201ba46dcb412ee57ab906d19741ec..2851b8a429032f67b319ffd90d5ba6e5aa8f4aa3 100644
--- a/dist/components/ActionIcon/CloseButton/CloseButton.svelte.d.ts
+++ b/dist/components/ActionIcon/CloseButton/CloseButton.svelte.d.ts
@@ -152,113 +152,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLButtonElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLButtonElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Affix/Affix.svelte.d.ts b/dist/components/Affix/Affix.svelte.d.ts
index 7d9bc2aa0568f95c1785f0878823efa9beaadf81..4162214f0e1844cf69dda9e0fceb458870be93f8 100644
--- a/dist/components/Affix/Affix.svelte.d.ts
+++ b/dist/components/Affix/Affix.svelte.d.ts
@@ -141,113 +141,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Alert/Alert.svelte b/dist/components/Alert/Alert.svelte
index d3bcd371e49e3960b5b39dd35f10ff7e94de65b6..9e2360111cb8fce1bfe6b4a0d3edf140c33d2c50 100644
--- a/dist/components/Alert/Alert.svelte
+++ b/dist/components/Alert/Alert.svelte
@@ -33,7 +33,7 @@ $: ({ cx, classes } = useStyles({ color, radius, variant }, { name: 'Alert', ove
 							variant="transparent"
 							size={iconSize}
 							{iconSize}
-							on:click={onClose}
+							onclick={onClose}
 						/>
 					{/if}
 				</div>
diff --git a/dist/components/Alert/Alert.svelte.d.ts b/dist/components/Alert/Alert.svelte.d.ts
index f1b90e38a7eeeb589d2a885d9a06093c14760591..e1d75cebbbf496b1e71cb4609ab5c67a66eef283 100644
--- a/dist/components/Alert/Alert.svelte.d.ts
+++ b/dist/components/Alert/Alert.svelte.d.ts
@@ -141,113 +141,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     slots: {
         icon: {};
diff --git a/dist/components/Anchor/Anchor.svelte.d.ts b/dist/components/Anchor/Anchor.svelte.d.ts
index fe35944046bf64554c1172606e66115806105302..65e4ad732788442a229b41a958b4290ce102484b 100644
--- a/dist/components/Anchor/Anchor.svelte.d.ts
+++ b/dist/components/Anchor/Anchor.svelte.d.ts
@@ -157,113 +157,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLAnchorElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLAnchorElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/AppShell/AppShell.svelte.d.ts b/dist/components/AppShell/AppShell.svelte.d.ts
index 855f2c25634541263df088b1c7e0c8e8eab8c446..50b63bfffa755dc3d2096dfba433f78f0abb58b8 100644
--- a/dist/components/AppShell/AppShell.svelte.d.ts
+++ b/dist/components/AppShell/AppShell.svelte.d.ts
@@ -141,113 +141,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/AppShell/Aside/Aside.svelte.d.ts b/dist/components/AppShell/Aside/Aside.svelte.d.ts
index 68ddab3b858e119a0827c025991609cfc6f4f54c..9057dd5394fe721bfb7ede362566d333457b28d7 100644
--- a/dist/components/AppShell/Aside/Aside.svelte.d.ts
+++ b/dist/components/AppShell/Aside/Aside.svelte.d.ts
@@ -139,113 +139,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/AppShell/Footer/Footer.svelte.d.ts b/dist/components/AppShell/Footer/Footer.svelte.d.ts
index 78f00a0eab80841fae6e0037b1a6eb52e1d6394e..e2fad819dea587135943c993193d8a4acffe7689 100644
--- a/dist/components/AppShell/Footer/Footer.svelte.d.ts
+++ b/dist/components/AppShell/Footer/Footer.svelte.d.ts
@@ -137,113 +137,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/AppShell/Header/Header.svelte.d.ts b/dist/components/AppShell/Header/Header.svelte.d.ts
index d48ed1f9953c5828b887c29f63876e3441a70357..5184b9d271944c14581f9c171fe8a6fff6be26a9 100644
--- a/dist/components/AppShell/Header/Header.svelte.d.ts
+++ b/dist/components/AppShell/Header/Header.svelte.d.ts
@@ -137,113 +137,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/AppShell/HorizontalSection/HorizontalSection.svelte.d.ts b/dist/components/AppShell/HorizontalSection/HorizontalSection.svelte.d.ts
index 37d6ba10fa9eb82fe3e3506a948b3f0d42f07090..eaec635b09e3cb0e39fadddd373c033ea82f5d34 100644
--- a/dist/components/AppShell/HorizontalSection/HorizontalSection.svelte.d.ts
+++ b/dist/components/AppShell/HorizontalSection/HorizontalSection.svelte.d.ts
@@ -143,113 +143,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/AppShell/Navbar/Navbar.svelte.d.ts b/dist/components/AppShell/Navbar/Navbar.svelte.d.ts
index 6993d210821492ee9aea11bf0de4b1784b819b65..24be01ae8727351f2579ed23b74f7ede37faa90a 100644
--- a/dist/components/AppShell/Navbar/Navbar.svelte.d.ts
+++ b/dist/components/AppShell/Navbar/Navbar.svelte.d.ts
@@ -139,113 +139,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/AppShell/VerticalSection/VerticalSection.svelte.d.ts b/dist/components/AppShell/VerticalSection/VerticalSection.svelte.d.ts
index 539b380be1afd3518cca4e0725dfb921b448953d..58d58b56bbad9f283dc260620fa0aeab2f1d28df 100644
--- a/dist/components/AppShell/VerticalSection/VerticalSection.svelte.d.ts
+++ b/dist/components/AppShell/VerticalSection/VerticalSection.svelte.d.ts
@@ -138,113 +138,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/AspectRatio/AspectRatio.svelte.d.ts b/dist/components/AspectRatio/AspectRatio.svelte.d.ts
index 85cb353ca48c15803c0ed3435cb86888cd793fa2..8c5c29cf8c5f8531d8aab7091735b3907431305b 100644
--- a/dist/components/AspectRatio/AspectRatio.svelte.d.ts
+++ b/dist/components/AspectRatio/AspectRatio.svelte.d.ts
@@ -134,113 +134,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Badge/Badge.svelte b/dist/components/Badge/Badge.svelte
index d1c8085d82b2a26bd0df852d0eeb49dfcc31e374..df92018f5f3d31a2cfb7214cb4c0a96f4e2fa6ec 100644
--- a/dist/components/Badge/Badge.svelte
+++ b/dist/components/Badge/Badge.svelte
@@ -1,11 +1,27 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-badge',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import useStyles from './Badge.styles';
 import { createEventForwarder, useActions } from '../../internal';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 import Box from '../Box/Box.svelte';
 export let use = [], element = undefined, className = '', override = {}, color = 'blue', variant = 'light', gradient = { from: 'blue', to: 'cyan', deg: 45 }, size = 'md', radius = 'xl', fullWidth = false;
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 $: ({ cx, classes } = useStyles({
     color,
     fullWidth,
diff --git a/dist/components/Badge/Badge.svelte.d.ts b/dist/components/Badge/Badge.svelte.d.ts
index 5af477a494fed3de1ae41190e5c066a7d8ad2b09..3e237a38b5d078f28d7a7726bf4a0b9d34fbb3c4 100644
--- a/dist/components/Badge/Badge.svelte.d.ts
+++ b/dist/components/Badge/Badge.svelte.d.ts
@@ -138,113 +138,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Blockquote/Blockquote.svelte.d.ts b/dist/components/Blockquote/Blockquote.svelte.d.ts
index 0ba8450f2000878f55bcc2387dd57e88a9aed80d..b36b9b33d7e9d967825a001da9e4271b02004f01 100644
--- a/dist/components/Blockquote/Blockquote.svelte.d.ts
+++ b/dist/components/Blockquote/Blockquote.svelte.d.ts
@@ -158,117 +158,117 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement> & import("svelte/elements").ClipboardEventHandler<HTMLQuoteElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement> & import("svelte/elements").ClipboardEventHandler<HTMLQuoteElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement> & import("svelte/elements").ClipboardEventHandler<HTMLQuoteElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement> & import("svelte/elements").CompositionEventHandler<HTMLQuoteElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement> & import("svelte/elements").CompositionEventHandler<HTMLQuoteElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement> & import("svelte/elements").CompositionEventHandler<HTMLQuoteElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLQuoteElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLQuoteElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLQuoteElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLQuoteElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement> & import("svelte/elements").FormEventHandler<HTMLQuoteElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement> & import("svelte/elements").EventHandler<InputEvent, HTMLQuoteElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement> & import("svelte/elements").FormEventHandler<HTMLQuoteElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement> & import("svelte/elements").FormEventHandler<HTMLQuoteElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement> & import("svelte/elements").ClipboardEventHandler<HTMLQuoteElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement> & import("svelte/elements").ClipboardEventHandler<HTMLQuoteElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement> & import("svelte/elements").ClipboardEventHandler<HTMLQuoteElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement> & import("svelte/elements").CompositionEventHandler<HTMLQuoteElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement> & import("svelte/elements").CompositionEventHandler<HTMLQuoteElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement> & import("svelte/elements").CompositionEventHandler<HTMLQuoteElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLQuoteElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLQuoteElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLQuoteElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLQuoteElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement> & import("svelte/elements").FormEventHandler<HTMLQuoteElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement> & import("svelte/elements").EventHandler<InputEvent, HTMLQuoteElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement> & import("svelte/elements").FormEventHandler<HTMLQuoteElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement> & import("svelte/elements").FormEventHandler<HTMLQuoteElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLQuoteElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLQuoteElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement> & import("svelte/elements").KeyboardEventHandler<HTMLQuoteElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement> & import("svelte/elements").KeyboardEventHandler<HTMLQuoteElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement> & import("svelte/elements").KeyboardEventHandler<HTMLQuoteElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLQuoteElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLQuoteElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLQuoteElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLQuoteElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement> & import("svelte/elements").UIEventHandler<HTMLQuoteElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement> & import("svelte/elements").UIEventHandler<HTMLQuoteElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLAnchorElement> & import("svelte/elements").WheelEventHandler<HTMLQuoteElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement> & import("svelte/elements").AnimationEventHandler<HTMLQuoteElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement> & import("svelte/elements").AnimationEventHandler<HTMLQuoteElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement> & import("svelte/elements").AnimationEventHandler<HTMLQuoteElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLQuoteElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLQuoteElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLQuoteElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLQuoteElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLQuoteElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLQuoteElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLQuoteElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLQuoteElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement> & import("svelte/elements").MessageEventHandler<HTMLQuoteElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement> & import("svelte/elements").MessageEventHandler<HTMLQuoteElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement> & import("svelte/elements").KeyboardEventHandler<HTMLQuoteElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement> & import("svelte/elements").KeyboardEventHandler<HTMLQuoteElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement> & import("svelte/elements").KeyboardEventHandler<HTMLQuoteElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLQuoteElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLQuoteElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLQuoteElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLQuoteElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLQuoteElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLQuoteElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLQuoteElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement> & import("svelte/elements").UIEventHandler<HTMLQuoteElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement> & import("svelte/elements").UIEventHandler<HTMLQuoteElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLAnchorElement> & import("svelte/elements").WheelEventHandler<HTMLQuoteElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement> & import("svelte/elements").AnimationEventHandler<HTMLQuoteElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement> & import("svelte/elements").AnimationEventHandler<HTMLQuoteElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement> & import("svelte/elements").AnimationEventHandler<HTMLQuoteElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLQuoteElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLQuoteElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLQuoteElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLQuoteElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLQuoteElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLQuoteElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLQuoteElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLQuoteElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement> & import("svelte/elements").MessageEventHandler<HTMLQuoteElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement> & import("svelte/elements").MessageEventHandler<HTMLQuoteElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLQuoteElement>;
         cite?: string;
     };
     events: {
diff --git a/dist/components/Box/Box.svelte b/dist/components/Box/Box.svelte
index 83b2a0c6b9ef8ccd003e4d995cecb17f9864bf6a..5030b97da76f91f653b40b2bca0ca4754a71d284 100644
--- a/dist/components/Box/Box.svelte
+++ b/dist/components/Box/Box.svelte
@@ -1,11 +1,27 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-box',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import { getSystemStyles } from './context';
 import { css as _css, useSvelteUITheme, useSvelteUIThemeContext } from '../../styles';
 import { createEventForwarder, useActions } from '../../internal';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 export let use = [], element = undefined, className = '', css = {}, root = undefined, m = undefined, my = undefined, mx = undefined, mt = undefined, mb = undefined, ml = undefined, mr = undefined, p = undefined, py = undefined, px = undefined, pt = undefined, pb = undefined, pl = undefined, pr = undefined;
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 /** workaround for root type errors, this should be replaced by a better type system */
 const castRoot = () => root;
 const theme = useSvelteUIThemeContext()?.theme || useSvelteUITheme();
diff --git a/dist/components/Box/Box.svelte.d.ts b/dist/components/Box/Box.svelte.d.ts
index 222b8703faee6f2354b39dae50b85cdb3fdfd291..3ed18961f5b41f2e82d138efc330b3f2c364b3d4 100644
--- a/dist/components/Box/Box.svelte.d.ts
+++ b/dist/components/Box/Box.svelte.d.ts
@@ -135,21 +135,21 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement> & import("svelte/elements").ClipboardEventHandler<HTMLBaseElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement> & import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLFormElement> & import("svelte/elements").ClipboardEventHandler<HTMLLabelElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement> & import("svelte/elements").ClipboardEventHandler<HTMLBaseElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement> & import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLFormElement> & import("svelte/elements").ClipboardEventHandler<HTMLLabelElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement> & import("svelte/elements").ClipboardEventHandler<HTMLBaseElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement> & import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLFormElement> & import("svelte/elements").ClipboardEventHandler<HTMLLabelElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement> & import("svelte/elements").CompositionEventHandler<HTMLBaseElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement> & import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLFormElement> & import("svelte/elements").CompositionEventHandler<HTMLLabelElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement> & import("svelte/elements").CompositionEventHandler<HTMLBaseElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement> & import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLFormElement> & import("svelte/elements").CompositionEventHandler<HTMLLabelElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement> & import("svelte/elements").CompositionEventHandler<HTMLBaseElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement> & import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLFormElement> & import("svelte/elements").CompositionEventHandler<HTMLLabelElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement> & import("svelte/elements").FocusEventHandler<HTMLBaseElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLFormElement> & import("svelte/elements").FocusEventHandler<HTMLLabelElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement> & import("svelte/elements").FocusEventHandler<HTMLBaseElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLFormElement> & import("svelte/elements").FocusEventHandler<HTMLLabelElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement> & import("svelte/elements").FocusEventHandler<HTMLBaseElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLFormElement> & import("svelte/elements").FocusEventHandler<HTMLLabelElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement> & import("svelte/elements").FocusEventHandler<HTMLBaseElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLFormElement> & import("svelte/elements").FocusEventHandler<HTMLLabelElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement> & import("svelte/elements").FormEventHandler<HTMLBaseElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement> & import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLFormElement> & import("svelte/elements").FormEventHandler<HTMLLabelElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement> & import("svelte/elements").EventHandler<InputEvent, HTMLBaseElement> & import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement> & import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement> & import("svelte/elements").EventHandler<InputEvent, HTMLFormElement> & import("svelte/elements").EventHandler<InputEvent, HTMLLabelElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement> & import("svelte/elements").FormEventHandler<HTMLBaseElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement> & import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLFormElement> & import("svelte/elements").FormEventHandler<HTMLLabelElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement> & import("svelte/elements").FormEventHandler<HTMLBaseElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement> & import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLFormElement> & import("svelte/elements").FormEventHandler<HTMLLabelElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement> & import("svelte/elements").ClipboardEventHandler<HTMLBaseElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement> & import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLFormElement> & import("svelte/elements").ClipboardEventHandler<HTMLLabelElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement> & import("svelte/elements").ClipboardEventHandler<HTMLBaseElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement> & import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLFormElement> & import("svelte/elements").ClipboardEventHandler<HTMLLabelElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement> & import("svelte/elements").ClipboardEventHandler<HTMLBaseElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement> & import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLFormElement> & import("svelte/elements").ClipboardEventHandler<HTMLLabelElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement> & import("svelte/elements").CompositionEventHandler<HTMLBaseElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement> & import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLFormElement> & import("svelte/elements").CompositionEventHandler<HTMLLabelElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement> & import("svelte/elements").CompositionEventHandler<HTMLBaseElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement> & import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLFormElement> & import("svelte/elements").CompositionEventHandler<HTMLLabelElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement> & import("svelte/elements").CompositionEventHandler<HTMLBaseElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement> & import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLFormElement> & import("svelte/elements").CompositionEventHandler<HTMLLabelElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement> & import("svelte/elements").FocusEventHandler<HTMLBaseElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLFormElement> & import("svelte/elements").FocusEventHandler<HTMLLabelElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement> & import("svelte/elements").FocusEventHandler<HTMLBaseElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLFormElement> & import("svelte/elements").FocusEventHandler<HTMLLabelElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement> & import("svelte/elements").FocusEventHandler<HTMLBaseElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLFormElement> & import("svelte/elements").FocusEventHandler<HTMLLabelElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement> & import("svelte/elements").FocusEventHandler<HTMLBaseElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement> & import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLFormElement> & import("svelte/elements").FocusEventHandler<HTMLLabelElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement> & import("svelte/elements").FormEventHandler<HTMLBaseElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement> & import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLFormElement> & import("svelte/elements").FormEventHandler<HTMLLabelElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement> & import("svelte/elements").EventHandler<InputEvent, HTMLBaseElement> & import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement> & import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement> & import("svelte/elements").EventHandler<InputEvent, HTMLFormElement> & import("svelte/elements").EventHandler<InputEvent, HTMLLabelElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement> & import("svelte/elements").FormEventHandler<HTMLBaseElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement> & import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLFormElement> & import("svelte/elements").FormEventHandler<HTMLLabelElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement> & import("svelte/elements").FormEventHandler<HTMLBaseElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement> & import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLFormElement> & import("svelte/elements").FormEventHandler<HTMLLabelElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
@@ -162,8 +162,8 @@ declare const __propDef: {
         }, HTMLFormElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLLabelElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
@@ -176,92 +176,92 @@ declare const __propDef: {
         }, HTMLFormElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLLabelElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement> & import("svelte/elements").KeyboardEventHandler<HTMLBaseElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement> & import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLFormElement> & import("svelte/elements").KeyboardEventHandler<HTMLLabelElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement> & import("svelte/elements").KeyboardEventHandler<HTMLBaseElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement> & import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLFormElement> & import("svelte/elements").KeyboardEventHandler<HTMLLabelElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement> & import("svelte/elements").KeyboardEventHandler<HTMLBaseElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement> & import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLFormElement> & import("svelte/elements").KeyboardEventHandler<HTMLLabelElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement> & import("svelte/elements").TouchEventHandler<HTMLBaseElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLFormElement> & import("svelte/elements").TouchEventHandler<HTMLLabelElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement> & import("svelte/elements").TouchEventHandler<HTMLBaseElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLFormElement> & import("svelte/elements").TouchEventHandler<HTMLLabelElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement> & import("svelte/elements").TouchEventHandler<HTMLBaseElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLFormElement> & import("svelte/elements").TouchEventHandler<HTMLLabelElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement> & import("svelte/elements").TouchEventHandler<HTMLBaseElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLFormElement> & import("svelte/elements").TouchEventHandler<HTMLLabelElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement> & import("svelte/elements").UIEventHandler<HTMLBaseElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement> & import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLFormElement> & import("svelte/elements").UIEventHandler<HTMLLabelElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement> & import("svelte/elements").UIEventHandler<HTMLBaseElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement> & import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLFormElement> & import("svelte/elements").UIEventHandler<HTMLLabelElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement> & import("svelte/elements").WheelEventHandler<HTMLBaseElement> & import("svelte/elements").WheelEventHandler<HTMLAnchorElement> & import("svelte/elements").WheelEventHandler<HTMLButtonElement> & import("svelte/elements").WheelEventHandler<HTMLFormElement> & import("svelte/elements").WheelEventHandler<HTMLLabelElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement> & import("svelte/elements").AnimationEventHandler<HTMLBaseElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement> & import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLFormElement> & import("svelte/elements").AnimationEventHandler<HTMLLabelElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement> & import("svelte/elements").AnimationEventHandler<HTMLBaseElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement> & import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLFormElement> & import("svelte/elements").AnimationEventHandler<HTMLLabelElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement> & import("svelte/elements").AnimationEventHandler<HTMLBaseElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement> & import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLFormElement> & import("svelte/elements").AnimationEventHandler<HTMLLabelElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement> & import("svelte/elements").TransitionEventHandler<HTMLBaseElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLFormElement> & import("svelte/elements").TransitionEventHandler<HTMLLabelElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement> & import("svelte/elements").TransitionEventHandler<HTMLBaseElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLFormElement> & import("svelte/elements").TransitionEventHandler<HTMLLabelElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement> & import("svelte/elements").TransitionEventHandler<HTMLBaseElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLFormElement> & import("svelte/elements").TransitionEventHandler<HTMLLabelElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement> & import("svelte/elements").TransitionEventHandler<HTMLBaseElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLFormElement> & import("svelte/elements").TransitionEventHandler<HTMLLabelElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLBaseElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLLabelElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLBaseElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLLabelElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLBaseElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLLabelElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLBaseElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLLabelElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement> & import("svelte/elements").MessageEventHandler<HTMLBaseElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement> & import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLFormElement> & import("svelte/elements").MessageEventHandler<HTMLLabelElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement> & import("svelte/elements").MessageEventHandler<HTMLBaseElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement> & import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLFormElement> & import("svelte/elements").MessageEventHandler<HTMLLabelElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement> & import("svelte/elements").KeyboardEventHandler<HTMLBaseElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement> & import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLFormElement> & import("svelte/elements").KeyboardEventHandler<HTMLLabelElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement> & import("svelte/elements").KeyboardEventHandler<HTMLBaseElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement> & import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLFormElement> & import("svelte/elements").KeyboardEventHandler<HTMLLabelElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement> & import("svelte/elements").KeyboardEventHandler<HTMLBaseElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement> & import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLFormElement> & import("svelte/elements").KeyboardEventHandler<HTMLLabelElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement> & import("svelte/elements").DragEventHandler<HTMLBaseElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement> & import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLFormElement> & import("svelte/elements").DragEventHandler<HTMLLabelElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement> & import("svelte/elements").MouseEventHandler<HTMLBaseElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement> & import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLFormElement> & import("svelte/elements").MouseEventHandler<HTMLLabelElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement> & import("svelte/elements").TouchEventHandler<HTMLBaseElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLFormElement> & import("svelte/elements").TouchEventHandler<HTMLLabelElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement> & import("svelte/elements").TouchEventHandler<HTMLBaseElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLFormElement> & import("svelte/elements").TouchEventHandler<HTMLLabelElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement> & import("svelte/elements").TouchEventHandler<HTMLBaseElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLFormElement> & import("svelte/elements").TouchEventHandler<HTMLLabelElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement> & import("svelte/elements").TouchEventHandler<HTMLBaseElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement> & import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLFormElement> & import("svelte/elements").TouchEventHandler<HTMLLabelElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement> & import("svelte/elements").PointerEventHandler<HTMLBaseElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement> & import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLFormElement> & import("svelte/elements").PointerEventHandler<HTMLLabelElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement> & import("svelte/elements").UIEventHandler<HTMLBaseElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement> & import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLFormElement> & import("svelte/elements").UIEventHandler<HTMLLabelElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement> & import("svelte/elements").UIEventHandler<HTMLBaseElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement> & import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLFormElement> & import("svelte/elements").UIEventHandler<HTMLLabelElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement> & import("svelte/elements").WheelEventHandler<HTMLBaseElement> & import("svelte/elements").WheelEventHandler<HTMLAnchorElement> & import("svelte/elements").WheelEventHandler<HTMLButtonElement> & import("svelte/elements").WheelEventHandler<HTMLFormElement> & import("svelte/elements").WheelEventHandler<HTMLLabelElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement> & import("svelte/elements").AnimationEventHandler<HTMLBaseElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement> & import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLFormElement> & import("svelte/elements").AnimationEventHandler<HTMLLabelElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement> & import("svelte/elements").AnimationEventHandler<HTMLBaseElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement> & import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLFormElement> & import("svelte/elements").AnimationEventHandler<HTMLLabelElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement> & import("svelte/elements").AnimationEventHandler<HTMLBaseElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement> & import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLFormElement> & import("svelte/elements").AnimationEventHandler<HTMLLabelElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement> & import("svelte/elements").TransitionEventHandler<HTMLBaseElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLFormElement> & import("svelte/elements").TransitionEventHandler<HTMLLabelElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement> & import("svelte/elements").TransitionEventHandler<HTMLBaseElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLFormElement> & import("svelte/elements").TransitionEventHandler<HTMLLabelElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement> & import("svelte/elements").TransitionEventHandler<HTMLBaseElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLFormElement> & import("svelte/elements").TransitionEventHandler<HTMLLabelElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement> & import("svelte/elements").TransitionEventHandler<HTMLBaseElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement> & import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLFormElement> & import("svelte/elements").TransitionEventHandler<HTMLLabelElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLBaseElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLLabelElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLBaseElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLLabelElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLBaseElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLLabelElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLBaseElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLFormElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLLabelElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement> & import("svelte/elements").MessageEventHandler<HTMLBaseElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement> & import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLFormElement> & import("svelte/elements").MessageEventHandler<HTMLLabelElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement> & import("svelte/elements").MessageEventHandler<HTMLBaseElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement> & import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLFormElement> & import("svelte/elements").MessageEventHandler<HTMLLabelElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement> & import("svelte/elements").EventHandler<Event, HTMLBaseElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement> & import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLFormElement> & import("svelte/elements").EventHandler<Event, HTMLLabelElement>;
         href?: string;
         target?: string;
         download?: any;
diff --git a/dist/components/Breadcrumbs/Breadcrumbs.svelte.d.ts b/dist/components/Breadcrumbs/Breadcrumbs.svelte.d.ts
index da7946e8d7cbdc2bbb6c5238cac5fffebcbc19b1..b0da48ea621bd2e21bdb53d3d6bf9059d91e1aa3 100644
--- a/dist/components/Breadcrumbs/Breadcrumbs.svelte.d.ts
+++ b/dist/components/Breadcrumbs/Breadcrumbs.svelte.d.ts
@@ -138,113 +138,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Breadcrumbs/BreadcrumbsItem/BreadcrumbsItem.svelte.d.ts b/dist/components/Breadcrumbs/BreadcrumbsItem/BreadcrumbsItem.svelte.d.ts
index d9c7df5466d3aaa681a3d216fc28ea3ec88009bf..6d086cd077d29a03a7715ce7737ba6f8e04acac2 100644
--- a/dist/components/Breadcrumbs/BreadcrumbsItem/BreadcrumbsItem.svelte.d.ts
+++ b/dist/components/Breadcrumbs/BreadcrumbsItem/BreadcrumbsItem.svelte.d.ts
@@ -138,113 +138,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Burger/Burger.stories.svelte b/dist/components/Burger/Burger.stories.svelte
index 8d7b2e319aba7b73082e0899c19d70da58b369a7..e5978baa4a20d58082869858c79578af1560cbb9 100644
--- a/dist/components/Burger/Burger.stories.svelte
+++ b/dist/components/Burger/Burger.stories.svelte
@@ -7,13 +7,13 @@ let opened = false;
 <Meta title="Components/Burger" component={Burger} />
 
 <Template let:args>
-	<Burger {opened} on:click={() => (opened = !opened)} {...args} />
+	<Burger {opened} onclick={() => (opened = !opened)} {...args} />
 </Template>
 
 <Story name="Burger" id="burgerStory" />
 
 <Story name="Burger inside a button" id="burgerButtonStory">
-	<Button ripple variant="default" color="black" on:click={() => (opened = !opened)}>
+	<Button ripple variant="default" color="black" onclick={() => (opened = !opened)}>
 		<Burger {opened} size="sm" />
 		Menu
 	</Button>
diff --git a/dist/components/Burger/Burger.svelte b/dist/components/Burger/Burger.svelte
index 7140d4c4a0740ffdc5b9e67a1a963f000412319c..6e4874924435467fcd0f9b5c8580563c0ab2ea4e 100644
--- a/dist/components/Burger/Burger.svelte
+++ b/dist/components/Burger/Burger.svelte
@@ -1,12 +1,28 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-burger',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import useStyles from './Burger.styles';
 import { UnstyledButton } from '../Button';
 import { colorScheme } from '../../styles';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 export let use = [], element = undefined, className = '', override = {}, opened = true, color = undefined, size = 'md';
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 $: _color = color ? color : $colorScheme === 'dark' ? 'white' : 'black';
 $: ({ classes, getStyles, cx } = useStyles({ color: _color, size, opened }, { name: 'Burger' }));
 </script>
diff --git a/dist/components/Burger/Burger.svelte.d.ts b/dist/components/Burger/Burger.svelte.d.ts
index c7351d76722f73f2ce8e278db7913f755dfc8806..90fb737ea1053001872beadb3771bed519bbe6ab 100644
--- a/dist/components/Burger/Burger.svelte.d.ts
+++ b/dist/components/Burger/Burger.svelte.d.ts
@@ -158,117 +158,117 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement> & import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement> & import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLButtonElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLAnchorElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLButtonElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLAnchorElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement> & import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement> & import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
         download?: any;
         hreflang?: string;
         media?: string;
diff --git a/dist/components/Button/Button.svelte b/dist/components/Button/Button.svelte
index 00381d335f844ec99a7dd561ab16656274c43414..4a0c4d86de4cc95b109199031ac8dc82a0156aad 100644
--- a/dist/components/Button/Button.svelte
+++ b/dist/components/Button/Button.svelte
@@ -1,5 +1,19 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-button',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import useStyles from './Button.styles';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 import { ButtonErrors } from './Button.errors';
 import Error from '../../internal/errors/Error.svelte';
@@ -12,7 +26,9 @@ export let use = [], element = undefined, className = '', override = {}, variant
 }, href = null, external = false, disabled = false, compact = false, loading = false, uppercase = false, fullSize = false, ripple = false;
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 // --------------Error Handling-------------------
 let observable = false;
 let err;
diff --git a/dist/components/Button/Button.svelte.d.ts b/dist/components/Button/Button.svelte.d.ts
index 8f9690ebd4cc51c4988c70444183969115f0523e..8b06bce00df469ab68226e553519fecd2acb66f2 100644
--- a/dist/components/Button/Button.svelte.d.ts
+++ b/dist/components/Button/Button.svelte.d.ts
@@ -156,117 +156,117 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement> & import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement> & import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLButtonElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLAnchorElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLButtonElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLAnchorElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement> & import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement> & import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
         download?: any;
         hreflang?: string;
         media?: string;
diff --git a/dist/components/Button/UnstyledButton/UnstyledButton.svelte b/dist/components/Button/UnstyledButton/UnstyledButton.svelte
index feef7d986136b5e8c5f8e91641ba445ed0b83355..843db237226e7daffa2be128f06575f86555cb98 100644
--- a/dist/components/Button/UnstyledButton/UnstyledButton.svelte
+++ b/dist/components/Button/UnstyledButton/UnstyledButton.svelte
@@ -1,11 +1,27 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-unstyled-button',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import useStyles from './UnstyledButton.styles';
 import { Box } from '../../Box';
 import { createEventForwarder, useActions } from '../../../internal';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 export let use = [], element = undefined, className = '', override = {}, root = 'button';
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 $: ({ cx, classes, getStyles } = useStyles(null, { name: 'UnstyledButton' }));
 </script>
 
diff --git a/dist/components/Button/UnstyledButton/UnstyledButton.svelte.d.ts b/dist/components/Button/UnstyledButton/UnstyledButton.svelte.d.ts
index a180fb9abb3bfdc1a1ca51002f06bc999e41bc2f..835fc46a7d1b5728dd18bb7ab4b91348842a06ce 100644
--- a/dist/components/Button/UnstyledButton/UnstyledButton.svelte.d.ts
+++ b/dist/components/Button/UnstyledButton/UnstyledButton.svelte.d.ts
@@ -157,117 +157,117 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement> & import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement> & import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLButtonElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLAnchorElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLButtonElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLAnchorElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement> & import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement> & import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
         download?: any;
         hreflang?: string;
         media?: string;
diff --git a/dist/components/Card/Card.svelte.d.ts b/dist/components/Card/Card.svelte.d.ts
index 6263d9d7fb123b854abcd0e959d4eb4ac54da02f..6a83efa1a719833d9a27bdb29fb69581723cd3f5 100644
--- a/dist/components/Card/Card.svelte.d.ts
+++ b/dist/components/Card/Card.svelte.d.ts
@@ -137,113 +137,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Card/CardSection/CardSection.svelte.d.ts b/dist/components/Card/CardSection/CardSection.svelte.d.ts
index 4f81edbebd68c45231a5f112224c9b4c1698da67..3967d35be1c3b3f0aa3bb8f11542c3a85ec5a265 100644
--- a/dist/components/Card/CardSection/CardSection.svelte.d.ts
+++ b/dist/components/Card/CardSection/CardSection.svelte.d.ts
@@ -137,113 +137,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Center/Center.svelte.d.ts b/dist/components/Center/Center.svelte.d.ts
index d66b20f6710a2f363f68e58973aca44a352bfd18..77d510427735dd6f76302a5aa48158e4faf72003 100644
--- a/dist/components/Center/Center.svelte.d.ts
+++ b/dist/components/Center/Center.svelte.d.ts
@@ -134,113 +134,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Checkbox/Checkbox.svelte b/dist/components/Checkbox/Checkbox.svelte
index df08c5d021fb1beecfe16cd571dd5d4cd1624aaf..0ada325f316ad872ef71f3133251ce2cfa0eb379 100644
--- a/dist/components/Checkbox/Checkbox.svelte
+++ b/dist/components/Checkbox/Checkbox.svelte
@@ -1,6 +1,20 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-checkbox',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import useStyles from './Checkbox.styles';
 import { randomID } from '../../styles';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 import Box from '../Box/Box.svelte';
 import ThemeIcon from '../ThemeIcon/ThemeIcon.svelte';
@@ -8,7 +22,9 @@ import CheckboxIcon from './CheckboxIcon.svelte';
 export let use = [], element = undefined, className = '', override = {}, color = 'blue', id = randomID(), disabled = false, value = null, checked = false, indeterminate = false, label = null, radius = 'sm', size = 'md', name = '', transitionDuration = 100;
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 $: checked = indeterminate || checked;
 $: ({ cx, classes, getStyles } = useStyles({ color, radius, size, transitionDuration }, { name: 'Checkbox' }));
 </script>
diff --git a/dist/components/Checkbox/Checkbox.svelte.d.ts b/dist/components/Checkbox/Checkbox.svelte.d.ts
index 41f20d69b08e75850d9ffec4c765d8915e1c15a1..8b89345f43be379f30680c5beaae5f5c27c1184a 100644
--- a/dist/components/Checkbox/Checkbox.svelte.d.ts
+++ b/dist/components/Checkbox/Checkbox.svelte.d.ts
@@ -111,113 +111,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:change'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onchange'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLInputElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLInputElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
         accept?: string;
         alt?: string;
         autocomplete?: string;
diff --git a/dist/components/Checkbox/CheckboxGroup/CheckboxGroup.svelte b/dist/components/Checkbox/CheckboxGroup/CheckboxGroup.svelte
index 1148d62de4553284a0be1655f2fce236ae802da7..b6c4d11a0d5a026257269b435d2c8cd9cd5d4e24 100644
--- a/dist/components/Checkbox/CheckboxGroup/CheckboxGroup.svelte
+++ b/dist/components/Checkbox/CheckboxGroup/CheckboxGroup.svelte
@@ -40,7 +40,7 @@ the items passed.
 				{radius}
 				{size}
 				{color}
-				on:change={(e) => onChanged(item.value, e.target)}
+				onchange={(e) => onChanged(item.value, e.target)}
 			/>
 		{/each}
 	</Group>
diff --git a/dist/components/Checkbox/CheckboxIcon.svelte.d.ts b/dist/components/Checkbox/CheckboxIcon.svelte.d.ts
index 8c3baee371607ecdec1fcdae90e01f5564681a33..81e390d747e4229fc83a5d5cb0dee1443180928d 100644
--- a/dist/components/Checkbox/CheckboxIcon.svelte.d.ts
+++ b/dist/components/Checkbox/CheckboxIcon.svelte.d.ts
@@ -111,113 +111,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:change'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onchange'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLInputElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLInputElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
         accept?: string;
         alt?: string;
         autocomplete?: string;
diff --git a/dist/components/Chip/Chip.svelte b/dist/components/Chip/Chip.svelte
index 65bec131e979fc5ee7903952d8add049c6c7f61d..a56adda141fc74c0d0088c3394f2aa5bce23c8f7 100644
--- a/dist/components/Chip/Chip.svelte
+++ b/dist/components/Chip/Chip.svelte
@@ -1,12 +1,28 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-chip',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import useStyles from './Chip.styles.js';
 import { randomID } from '../../styles';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 import Box from '../Box/Box.svelte';
 export let use = [], element = undefined, className = '', override = {}, color = 'blue', id = randomID(), disabled = false, value = undefined, checked = false, label = '', radius = 'xl', size = 'sm', variant = 'outline', transitionDuration = 100;
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 $: ({ cx, classes, getStyles } = useStyles({ color, radius, size, transitionDuration }, { name: 'Chip' }));
 </script>
 
diff --git a/dist/components/Chip/Chip.svelte.d.ts b/dist/components/Chip/Chip.svelte.d.ts
index 67d8ac13a05abbc54970cb28d099653d3f236d20..7a3f931bce81b3b03cbc542286fe4ac0be06e8b1 100644
--- a/dist/components/Chip/Chip.svelte.d.ts
+++ b/dist/components/Chip/Chip.svelte.d.ts
@@ -142,16 +142,16 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
         /**
          * A picker for one or more options.
          *
@@ -164,103 +164,103 @@ declare const __propDef: {
          * <Chip checked disabled>Disabled</Chip>
          * ```
          */
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Chip/ChipGroup/ChipGroup.svelte b/dist/components/Chip/ChipGroup/ChipGroup.svelte
index e4a2b6d6557114aadcbcc964c226599350c5347b..600f54e368f9541e150af98b2b3de96317f607ab 100644
--- a/dist/components/Chip/ChipGroup/ChipGroup.svelte
+++ b/dist/components/Chip/ChipGroup/ChipGroup.svelte
@@ -45,7 +45,7 @@ A chip group component is a container for Chips.
 				{color}
 				{variant}
 				{disabled}
-				on:change={(e) => onChanged(item.value, e.target)}
+				onchange={(e) => onChanged(item.value, e.target)}
 			/>
 		{/each}
 	</Group>
diff --git a/dist/components/Chip/ChipGroup/ChipGroup.svelte.d.ts b/dist/components/Chip/ChipGroup/ChipGroup.svelte.d.ts
index 2ecb0021d0a660176297846ded8dcfd60e410a40..2e7413cdb16428cca34838b41614b83e940dff2c 100644
--- a/dist/components/Chip/ChipGroup/ChipGroup.svelte.d.ts
+++ b/dist/components/Chip/ChipGroup/ChipGroup.svelte.d.ts
@@ -149,113 +149,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         change: CustomEvent<any>;
diff --git a/dist/components/Code/Code.svelte b/dist/components/Code/Code.svelte
index 54af00b882fa8d90130ab15487e11bafc11d3f04..ce8ff6874bbf1b12b5fd75a51ee44815d175b050 100644
--- a/dist/components/Code/Code.svelte
+++ b/dist/components/Code/Code.svelte
@@ -1,4 +1,18 @@
-<script>import { get_current_component } from 'svelte/internal';
+<svelte:options
+  customElement={{
+    tag: 'sui-code',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
+<script>import { onMount } from 'svelte';
 import { clipboard, useActions, createEventForwarder } from '../../internal';
 import Error from '../../internal/errors/Error.svelte';
 import useStyles from './Code.styles';
@@ -7,7 +21,9 @@ import { CodeErrors } from './Code.errors';
 export let use = [], element = undefined, className = '', override = {}, color = 'gray', block = false, width = 100, copy = false, message = 'Copied', noMono = false;
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 /** Copy logic */
 let copied = false;
 function toggle() {
@@ -63,7 +79,7 @@ Inline or block code without syntax highlighting
 			<p class={className}><slot>Write some code</slot></p>
 		{/if}
       {#if copy}
-			<button on:click={toggle} use:clipboard={message} class={classes.copy}
+			<button onclick={toggle} use:clipboard={message} class={classes.copy}
 				><CopyIcon {copied} /></button
 			>
 		{/if}
diff --git a/dist/components/Code/Code.svelte.d.ts b/dist/components/Code/Code.svelte.d.ts
index 75fa92b4d546b9682532db5e156db207f3d7830a..74a83945e903b6f5e22358f22277a5f0491cced4 100644
--- a/dist/components/Code/Code.svelte.d.ts
+++ b/dist/components/Code/Code.svelte.d.ts
@@ -138,113 +138,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement | HTMLPreElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement | HTMLPreElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement | HTMLPreElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement | HTMLPreElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement | HTMLPreElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement | HTMLPreElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement | HTMLPreElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement | HTMLPreElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement | HTMLPreElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement | HTMLPreElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement | HTMLPreElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement | HTMLPreElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement | HTMLPreElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement | HTMLPreElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement | HTMLPreElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement | HTMLPreElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement | HTMLPreElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement | HTMLPreElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement | HTMLPreElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement | HTMLPreElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement | HTMLPreElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement | HTMLPreElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement | HTMLPreElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement | HTMLPreElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement | HTMLPreElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement | HTMLPreElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement | HTMLPreElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement | HTMLPreElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement | HTMLPreElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement | HTMLPreElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement | HTMLPreElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement | HTMLPreElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement | HTMLPreElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement | HTMLPreElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement | HTMLPreElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement | HTMLPreElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement | HTMLPreElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement | HTMLPreElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement | HTMLPreElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement | HTMLPreElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement | HTMLPreElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement | HTMLPreElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement | HTMLPreElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement | HTMLPreElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement | HTMLPreElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement | HTMLPreElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement | HTMLPreElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement | HTMLPreElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement | HTMLPreElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement | HTMLPreElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement | HTMLPreElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement | HTMLPreElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement | HTMLPreElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement | HTMLPreElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement | HTMLPreElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement | HTMLPreElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement | HTMLPreElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement | HTMLPreElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement | HTMLPreElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement | HTMLPreElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement | HTMLPreElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement | HTMLPreElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement | HTMLPreElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement | HTMLPreElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement | HTMLPreElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement | HTMLPreElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement | HTMLPreElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement | HTMLPreElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement | HTMLPreElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement | HTMLPreElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement | HTMLPreElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement | HTMLPreElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement | HTMLPreElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement | HTMLPreElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement | HTMLPreElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement | HTMLPreElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement | HTMLPreElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement | HTMLPreElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement | HTMLPreElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement | HTMLPreElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Collapse/Collapse.stories.svelte b/dist/components/Collapse/Collapse.stories.svelte
index d903e3520bf4a6dca8fa1c0b4851c5b79d69a557..daf7bd1034fdeb766fa6f52d0179117701ee729d 100644
--- a/dist/components/Collapse/Collapse.stories.svelte
+++ b/dist/components/Collapse/Collapse.stories.svelte
@@ -10,7 +10,7 @@ let openInside = false;
 
 <Template let:args>
 	<Button
-		on:click={() => {
+		onclick={() => {
 			open = !open;
 		}}>Toggle collapse text</Button
 	>
@@ -26,7 +26,7 @@ let openInside = false;
 
 <Story name="Nested Collapse" id="collapseNestedStory">
 	<Button
-		on:click={() => {
+		onclick={() => {
 			open = !open;
 		}}>Toggle collapse</Button
 	>
@@ -35,7 +35,7 @@ let openInside = false;
 		<Paper>
 			Please click below to toggle a nested collapse!
 			<Button
-				on:click={() => {
+				onclick={() => {
 					openInside = !openInside;
 				}}>Toggle nested collapse</Button
 			>
diff --git a/dist/components/Collapse/Collapse.svelte b/dist/components/Collapse/Collapse.svelte
index 312f60ee8d08599ed796a04f456320e093fe4120..f6e6afe4a034494f2da0ae5460f45824ca785b51 100644
--- a/dist/components/Collapse/Collapse.svelte
+++ b/dist/components/Collapse/Collapse.svelte
@@ -1,10 +1,26 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-collapse',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import { fade, slide } from 'svelte/transition';
 import { createEventForwarder } from '../../internal';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 import { Box } from '../Box';
 export let use = [], element = undefined, className = '', override = {}, open, animateOpacity = true, transitionDuration = 200, slideTransitionOptions = { duration: transitionDuration };
 export { className as class };
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 </script>
 
 <!--
diff --git a/dist/components/Collapse/Collapse.svelte.d.ts b/dist/components/Collapse/Collapse.svelte.d.ts
index d3e3f6b4bd9aa02f5e583058a3a6fd3333412487..536a1fd59efd21808bad2572afb58a6a53e4c4ee 100644
--- a/dist/components/Collapse/Collapse.svelte.d.ts
+++ b/dist/components/Collapse/Collapse.svelte.d.ts
@@ -137,113 +137,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Container/Container.svelte.d.ts b/dist/components/Container/Container.svelte.d.ts
index 7cf437cf8a39e7fed8114563b0a6ad4b72fad065..ca0353c3d8dbbd6953c50e241f6b164270e30ec4 100644
--- a/dist/components/Container/Container.svelte.d.ts
+++ b/dist/components/Container/Container.svelte.d.ts
@@ -136,113 +136,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Divider/Divider.svelte.d.ts b/dist/components/Divider/Divider.svelte.d.ts
index 8141e840a4e4ff1f6f7f5476c9fe8c94d3b2124d..1d2ba071f03a33260ff9b1b78fe4d8ab550af2dd 100644
--- a/dist/components/Divider/Divider.svelte.d.ts
+++ b/dist/components/Divider/Divider.svelte.d.ts
@@ -139,113 +139,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/FileUpload/FileUpload.stories.svelte b/dist/components/FileUpload/FileUpload.stories.svelte
index 93b28fdaec41015c75a643b1cae0539f34d94580..30079859fded0ab18a314a320b8244aa03df8c60 100644
--- a/dist/components/FileUpload/FileUpload.stories.svelte
+++ b/dist/components/FileUpload/FileUpload.stories.svelte
@@ -36,7 +36,7 @@ function remove(index) {
 			fileIcon={File}
 			removeIcon={Trash}
 			resetIcon={Reset}
-			on:selected={handleSelected}
+			onselected={handleSelected}
 		>
 			<IconRenderer iconSize={48} icon={Download} />
 			<Text align="center" weight={'semibold'}>Click or drag file to this area to FileUpload</Text>
@@ -124,7 +124,7 @@ function remove(index) {
 				>
 					<img style="width: 50px; height: 50px;" src={preview(file)} alt="image{i}" />
 					<span style="flex: 1;">{file.name}</span>
-					<Button variant="default" size={'md'} on:click={() => remove(i)}>
+					<Button variant="default" size={'md'} onclick={() => remove(i)}>
 						<IconRenderer iconSize={20} icon={Trash} />
 					</Button>
 				</li>
diff --git a/dist/components/FileUpload/FileUpload.svelte b/dist/components/FileUpload/FileUpload.svelte
index be8d869168ff019257acae0dac08c81e8e84c690..960360cb6ec7f8bf6842dce460613c9bf9af7c4e 100644
--- a/dist/components/FileUpload/FileUpload.svelte
+++ b/dist/components/FileUpload/FileUpload.svelte
@@ -1,10 +1,25 @@
 <script context="module">export const ctx = 'Upload';
 </script>
 
+<svelte:options
+  customElement={{
+    tag: 'sui-file-upload',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import useStyles, { fontSizes } from './FileUpload.styles';
 import { Box } from '../Box';
 import { createEventForwarder, useActions } from '../../internal';
-import { createEventDispatcher, get_current_component } from 'svelte/internal';
+import { createEventDispatcher } from 'svelte';
+import { onMount } from 'svelte';
 import { randomID } from '../../styles';
 import IconRenderer from '../IconRenderer/IconRenderer.svelte';
 import Button from '../Button/Button.svelte';
@@ -13,11 +28,13 @@ export { className as class };
 let fileUploadComponent = undefined;
 const dispatch = createEventDispatcher();
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component(), [
-    'selected',
-    'removed',
-    'reset'
-]);
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component, [
+	'selected',
+	'removed',
+	'reset'
+]));
 function onFileSelected(e) {
     let localFile = [];
     for (let i = 0; i < e.files.length; i++) {
@@ -61,7 +78,7 @@ $: ({ cx, classes, getStyles } = useStyles({ color, size }, { name: 'FileUpload'
 			{disabled}
 			tabindex="-1"
 			{name}
-			on:change={({ target }) => {
+			onchange={({ target }) => {
 				onFileSelected(target);
 			}}
 			use:useActions={use}
@@ -71,12 +88,14 @@ $: ({ cx, classes, getStyles } = useStyles({ color, size }, { name: 'FileUpload'
 
 	{#if type && type == 'drag'}
 		<label
-			on:dragleave
-			on:dragover={(ev) => {
+			ondragleave={()=>{}}
+			ondragover={(ev) => {
 				ev.preventDefault();
 			}}
-			on:drop|preventDefault|stopPropagation={({ dataTransfer }) => {
-				onFileSelected(dataTransfer);
+			ondrop={(ev) => {
+				ev.preventDefault();
+				ev.stopPropagation();
+				onFileSelected(ev.dataTransfer);
 			}}
 			for={id}
 			class={cx(classes.drag, getStyles({ css: override }))}
@@ -90,7 +109,7 @@ $: ({ cx, classes, getStyles } = useStyles({ color, size }, { name: 'FileUpload'
 				{size}
 				{disabled}
 				{color}
-				on:click={() => {
+				onclick={() => {
 					fileUploadComponent.click();
 				}}
 			>
@@ -101,7 +120,7 @@ $: ({ cx, classes, getStyles } = useStyles({ color, size }, { name: 'FileUpload'
 				{label}
 			</Button>
 			{#if reset}
-				<Button {size} color={resetColor} disabled={files.length == 0} on:click={resetFiles}>
+				<Button {size} color={resetColor} disabled={files.length == 0} onclick={resetFiles}>
 					<slot name="leftIcon">
 						<IconRenderer icon={resetIcon} />
 					</slot>
@@ -124,7 +143,7 @@ $: ({ cx, classes, getStyles } = useStyles({ color, size }, { name: 'FileUpload'
 			</span>
 			<span class={classes.fileItemAction}>
 				<span>
-					<Button variant="default" {size} on:click={() => remove(i)}>
+					<Button variant="default" {size} onclick={() => remove(i)}>
 						<slot name="removeIcon">
 							<IconRenderer iconSize={fontSizes[size] * 1.5} icon={removeIcon} />
 						</slot>
diff --git a/dist/components/FileUpload/FileUpload.svelte.d.ts b/dist/components/FileUpload/FileUpload.svelte.d.ts
index ad4136a9934d59b3d1834411b2ad01d3ef0b192f..ff2fce78618d674b2b586be0bd782a77b4039e72 100644
--- a/dist/components/FileUpload/FileUpload.svelte.d.ts
+++ b/dist/components/FileUpload/FileUpload.svelte.d.ts
@@ -151,113 +151,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     slots: {
         default: {};
diff --git a/dist/components/Flex/Flex.svelte.d.ts b/dist/components/Flex/Flex.svelte.d.ts
index c0fb2b33208be374f4460376fbc48bf9c9838d38..fcb3e44e3aae824051a1447b2ef65f639847f1b5 100644
--- a/dist/components/Flex/Flex.svelte.d.ts
+++ b/dist/components/Flex/Flex.svelte.d.ts
@@ -140,113 +140,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Grid/Grid.svelte.d.ts b/dist/components/Grid/Grid.svelte.d.ts
index 6290214399108595af144186b0c684abf229cd04..cf7fc7c41c72e31911d1af6cdca4831d7db52e35 100644
--- a/dist/components/Grid/Grid.svelte.d.ts
+++ b/dist/components/Grid/Grid.svelte.d.ts
@@ -139,113 +139,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Group/Group.svelte.d.ts b/dist/components/Group/Group.svelte.d.ts
index 56938b2721aad72d0245b92bf22be6a20190275d..9b446a1cf43704b72b2a0dd61656a4244e649721 100644
--- a/dist/components/Group/Group.svelte.d.ts
+++ b/dist/components/Group/Group.svelte.d.ts
@@ -140,113 +140,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/IconRenderer/IconRenderer.svelte.d.ts b/dist/components/IconRenderer/IconRenderer.svelte.d.ts
index 6384babb9516436a7c395b2ae54e8e86ab65873f..fa4723114ca0b88955163564892ae104bd1f8115 100644
--- a/dist/components/IconRenderer/IconRenderer.svelte.d.ts
+++ b/dist/components/IconRenderer/IconRenderer.svelte.d.ts
@@ -136,113 +136,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Image/BackgroundImage/BackgroundImage.svelte b/dist/components/Image/BackgroundImage/BackgroundImage.svelte
index 3bd401b690314f799a1747a2ba286b7f870a37a5..1070cbecf3fc4cd3c41c1f73b941f0676c8ce64c 100644
--- a/dist/components/Image/BackgroundImage/BackgroundImage.svelte
+++ b/dist/components/Image/BackgroundImage/BackgroundImage.svelte
@@ -1,10 +1,26 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-background-image',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import useStyles from './BackgroundImage.styles';
 import { createEventForwarder, useActions } from '../../../internal';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 export let use = [], element = undefined, className = '', override = {}, radius = 0, src = '', width = undefined, height = undefined;
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 $: ({ cx, classes, getStyles } = useStyles({ height, radius, src, width }, { name: 'BackgroundImage' }));
 </script>
 
diff --git a/dist/components/Image/BackgroundImage/BackgroundImage.svelte.d.ts b/dist/components/Image/BackgroundImage/BackgroundImage.svelte.d.ts
index f4794dd00044435b8b51a45bfdbf449410b7a369..97118d6042d5cc43db3a862e35f7f9b067c3fd8f 100644
--- a/dist/components/Image/BackgroundImage/BackgroundImage.svelte.d.ts
+++ b/dist/components/Image/BackgroundImage/BackgroundImage.svelte.d.ts
@@ -153,113 +153,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLImageElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLImageElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLImageElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLImageElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLImageElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLImageElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLImageElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLImageElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLImageElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLImageElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLImageElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLImageElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLImageElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLImageElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLImageElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLImageElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLImageElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLImageElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLImageElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLImageElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLImageElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLImageElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLImageElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLImageElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLImageElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLImageElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLImageElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLImageElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLImageElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLImageElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLImageElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLImageElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLImageElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLImageElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLImageElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLImageElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLImageElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLImageElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLImageElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLImageElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLImageElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLImageElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLImageElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLImageElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Image/Image.svelte b/dist/components/Image/Image.svelte
index 207e2691bc3eae6e1b38eaa094d5878e1888ed52..aa93c6f3905c4d559efb66ff5196b56d41679937 100644
--- a/dist/components/Image/Image.svelte
+++ b/dist/components/Image/Image.svelte
@@ -1,4 +1,18 @@
-<script>import { get_current_component } from 'svelte/internal';
+<svelte:options
+  customElement={{
+    tag: 'sui-image',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
+<script>import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 import { Box } from '../Box';
 import { Skeleton } from '../Skeleton';
@@ -7,7 +21,9 @@ import useStyles from './Image.styles';
 import ImageIcon from './ImageIcon.svelte';
 export let use = [], element = undefined, override = {}, radius = 0, className = '', src = undefined, alt = '', fit = 'cover', width = '100%', height = 'auto', caption = undefined, usePlaceholder = false, loader = false;
 export { className as class };
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 let loaded = false;
 let error = false;
 let showPlaceholder = false;
@@ -42,8 +58,8 @@ Dynamic Image component with optional placeholder for loading and error state
 					class={classes.image}
 					{src}
 					{alt}
-					on:load={onLoad}
-					on:error={onError}
+					onload={onLoad}
+					onerror={onError}
 					{...$$restProps}
 				/>
 			</Skeleton>
diff --git a/dist/components/Image/Image.svelte.d.ts b/dist/components/Image/Image.svelte.d.ts
index 1997322d0c0fbd3b15948ae94e2ca6ef98de4b27..7db056006710b013164901578410bae82979f055 100644
--- a/dist/components/Image/Image.svelte.d.ts
+++ b/dist/components/Image/Image.svelte.d.ts
@@ -153,113 +153,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLImageElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLImageElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLImageElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLImageElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLImageElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLImageElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLImageElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLImageElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLImageElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLImageElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLImageElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLImageElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLImageElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLImageElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLImageElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLImageElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLImageElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLImageElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLImageElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLImageElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLImageElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLImageElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLImageElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLImageElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLImageElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLImageElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLImageElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLImageElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLImageElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLImageElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLImageElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLImageElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLImageElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLImageElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLImageElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLImageElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLImageElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLImageElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLImageElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLImageElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLImageElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLImageElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLImageElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLImageElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLImageElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLImageElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLImageElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLImageElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLImageElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLImageElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLImageElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLImageElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Input/Input.stories.svelte b/dist/components/Input/Input.stories.svelte
index 5006781bc37321dfc72ba379b3549c11b5a79e2e..56a1e45b9ae8e61e414c54a14d350abf79404818 100644
--- a/dist/components/Input/Input.stories.svelte
+++ b/dist/components/Input/Input.stories.svelte
@@ -41,7 +41,7 @@ let valueNumber = 0;
 <Story name="With right section" id="inputRightSectionStory">
 	<Input bind:value>
 		<svelte:fragment slot="rightSection">
-			<Button on:click={() => console.log('heelo')} />
+			<Button onclick={() => console.log('heelo')} />
 		</svelte:fragment>
 	</Input>
 </Story>
diff --git a/dist/components/Input/Input.svelte b/dist/components/Input/Input.svelte
index e19b3af108ccccafe05cb5c8cbca773393b21b13..d581a2af3ece16175d11212949318ba4cccc3108 100644
--- a/dist/components/Input/Input.svelte
+++ b/dist/components/Input/Input.svelte
@@ -1,4 +1,18 @@
-<script>import { get_current_component } from 'svelte/internal';
+<svelte:options
+  customElement={{
+    tag: 'sui-input',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
+<script>import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 import Box from '../Box/Box.svelte';
 import IconRenderer from '../IconRenderer/IconRenderer.svelte';
@@ -6,7 +20,9 @@ import useStyles from './Input.styles';
 export let use = [], element = undefined, className = '', override = {}, root = 'input', icon = null, iconWidth = 36, iconProps = { size: 20, color: 'currentColor' }, showRightSection = $$slots.rightSection, rightSectionWidth = 36, rightSectionProps = {}, wrapperProps = {}, id = 'input-id', required = false, radius = 'sm', variant = 'default', disabled = false, size = 'sm', value = '', invalid = false, multiline = false, autocomplete = 'on', type = 'text', placeholder = undefined, autofocus = undefined, resize = 'none', noPointerEventsRightSection = false;
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 function castRoot() {
     return root;
 }
@@ -106,10 +122,10 @@ Base component to create custom inputs
 				classes[`${variant}Variant`] ?? {}
 			)}
 			{...$$restProps}
-			on:input={onInput}
+			oninput={onInput}
 		/>
 	{:else if isHTMLElement && isInput(String(root))}
-		<!-- on:change needs to appear before use:forwardEvents so that the
+		<!-- onchange needs to appear before use:forwardEvents so that the
    		ordering of the events is correct and the value is updated before propagation -->
 		<!-- prettier-ignore -->
 		<svelte:element
@@ -136,8 +152,8 @@ Base component to create custom inputs
 				},
 				classes[`${variant}Variant`] ?? {}
 			)}
-			on:change={onChange}
-			on:input={onInput}
+			onchange={onChange}
+			oninput={onInput}
 			use:useActions={use}
 			use:forwardEvents
 			{...$$restProps}
diff --git a/dist/components/Input/Input.svelte.d.ts b/dist/components/Input/Input.svelte.d.ts
index e8792d5c52b1827e7a3519c5dfa13e3fefdc3289..8791a003dcb6b430ed0b335c1fd130ff668820c7 100644
--- a/dist/components/Input/Input.svelte.d.ts
+++ b/dist/components/Input/Input.svelte.d.ts
@@ -123,121 +123,121 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement>;
-        'on:change'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement> & import("svelte/elements").ChangeEventHandler<HTMLSelectElement> & import("svelte/elements").ChangeEventHandler<HTMLTextAreaElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement> & import("svelte/elements").EventHandler<InputEvent, HTMLSelectElement> & import("svelte/elements").EventHandler<InputEvent, HTMLTextAreaElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement>;
+        'onchange'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement> & import("svelte/elements").ChangeEventHandler<HTMLSelectElement> & import("svelte/elements").ChangeEventHandler<HTMLTextAreaElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement> & import("svelte/elements").EventHandler<InputEvent, HTMLSelectElement> & import("svelte/elements").EventHandler<InputEvent, HTMLTextAreaElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLInputElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLSelectElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLTextAreaElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLInputElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLSelectElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLTextAreaElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement> & import("svelte/elements").WheelEventHandler<HTMLSelectElement> & import("svelte/elements").WheelEventHandler<HTMLTextAreaElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement> & import("svelte/elements").WheelEventHandler<HTMLSelectElement> & import("svelte/elements").WheelEventHandler<HTMLTextAreaElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement>;
         accept?: string;
         alt?: string;
         checked?: boolean;
diff --git a/dist/components/InputWrapper/InputWrapper.svelte.d.ts b/dist/components/InputWrapper/InputWrapper.svelte.d.ts
index afba14e8ac9198d90ece6ffd42052b38c903bcaf..792ac092373577aa1f597eaa9a00cdca3cd09c52 100644
--- a/dist/components/InputWrapper/InputWrapper.svelte.d.ts
+++ b/dist/components/InputWrapper/InputWrapper.svelte.d.ts
@@ -142,113 +142,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/InputWrapper/LabelElement.svelte.d.ts b/dist/components/InputWrapper/LabelElement.svelte.d.ts
index 67210643a1ec108dd01afb0e5e9ad062a4227445..70186fc83c66060c2fd5b50c9466fbbb4ef5bfae 100644
--- a/dist/components/InputWrapper/LabelElement.svelte.d.ts
+++ b/dist/components/InputWrapper/LabelElement.svelte.d.ts
@@ -142,113 +142,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/JsonInput/JsonInput.svelte b/dist/components/JsonInput/JsonInput.svelte
index 079f9c076e7facb55b1bbe526d3c20bc65af4885..5ddce181899ceb220ab256f4e2fade0b2a1cc89c 100644
--- a/dist/components/JsonInput/JsonInput.svelte
+++ b/dist/components/JsonInput/JsonInput.svelte
@@ -30,7 +30,7 @@ Textarea specially made for JSON input.
 
 <Textarea
 	bind:value={_value}
-	on:blur={handleBlur}
+	onblur={handleBlur}
 	invalid={!valid}
 	error={!valid ? validationError : error}
 	{rows}
diff --git a/dist/components/Kbd/Kbd.svelte.d.ts b/dist/components/Kbd/Kbd.svelte.d.ts
index f659c9dbd2689fceddf85cc7b923d70b03dee182..aa44c4854707dd7bde9ba83a2fc928f7298709c8 100644
--- a/dist/components/Kbd/Kbd.svelte.d.ts
+++ b/dist/components/Kbd/Kbd.svelte.d.ts
@@ -133,113 +133,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Loader/Loader.svelte b/dist/components/Loader/Loader.svelte
index 9dd4122ee3298ef75e02ac52a14db173ad3c290f..5dcfe76a21e3c87a1af11305019f1b8d8290080b 100644
--- a/dist/components/Loader/Loader.svelte
+++ b/dist/components/Loader/Loader.svelte
@@ -1,4 +1,18 @@
-<script>import { get_current_component } from 'svelte/internal';
+<svelte:options
+  customElement={{
+    tag: 'sui-loader',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
+<script>import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 import Circle from './loaders/Circle.svelte';
 import Bars from './loaders/Bars.svelte';
@@ -7,7 +21,9 @@ import { LOADER_SIZES, getCorrectShade } from './Loader.styles';
 export let use = [], element = undefined, className = '', size = 'md', color = 'blue', variant = 'circle';
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 /** Loader logic */
 const LOADERS = {
     bars: Bars,
diff --git a/dist/components/Loader/Loader.svelte.d.ts b/dist/components/Loader/Loader.svelte.d.ts
index 54e5ceec0ac123392ca2401f17da0536e8d506a2..49daf6a9608e682b107560ddfa314e96f64454e1 100644
--- a/dist/components/Loader/Loader.svelte.d.ts
+++ b/dist/components/Loader/Loader.svelte.d.ts
@@ -327,113 +327,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Mark/Mark.svelte.d.ts b/dist/components/Mark/Mark.svelte.d.ts
index 59235fdd0b905c8c43103fc37ef3696cb4fce35d..ec98ad9aba348f1c12ae19621e41ff96aafc9734 100644
--- a/dist/components/Mark/Mark.svelte.d.ts
+++ b/dist/components/Mark/Mark.svelte.d.ts
@@ -156,113 +156,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLAnchorElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLAnchorElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/MediaQuery/MediaQuery.svelte.d.ts b/dist/components/MediaQuery/MediaQuery.svelte.d.ts
index c9415f1d655e48f25b4431c501d1b0b14dab4b1e..18a655d8797fbe5da21c1cdd6242e72803fa1415 100644
--- a/dist/components/MediaQuery/MediaQuery.svelte.d.ts
+++ b/dist/components/MediaQuery/MediaQuery.svelte.d.ts
@@ -137,113 +137,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Menu/Menu.stories.svelte b/dist/components/Menu/Menu.stories.svelte
index 4ddbc0ea49fd431ee136f3d4f3fc08ea63114f19..98f391c881d09e99c25a40d5e8e6c074c4df7967 100644
--- a/dist/components/Menu/Menu.stories.svelte
+++ b/dist/components/Menu/Menu.stories.svelte
@@ -94,10 +94,10 @@ let element;
 </Story>
 
 <Story name="Event listeners" id="menuEventListenersStory">
-	<Button on:click={() => (menuEvents = [...menuEvents, 'button click'])}>Test event</Button>
+	<Button onclick={() => (menuEvents = [...menuEvents, 'button click'])}>Test event</Button>
 	<Menu
-		on:open={() => (menuEvents = [...menuEvents, 'opened'])}
-		on:close={() => (menuEvents = [...menuEvents, 'closed'])}
+		onopen={() => (menuEvents = [...menuEvents, 'opened'])}
+		onclose={() => (menuEvents = [...menuEvents, 'closed'])}
 	>
 		<Button slot="control">Toggle menu</Button>
 		<Menu.Item icon={Gear}>Settings</Menu.Item>
@@ -120,7 +120,7 @@ let element;
 </Story>
 
 <Story name="Outside Toggle" id="menuOutsideToggleStory">
-	<Button on:click={() => element.toggle()}>Toggle Menu</Button>
+	<Button onclick={() => element.toggle()}>Toggle Menu</Button>
 
 	<Menu bind:this={element}>
 		<Menu.Item icon={Gear}>Settings</Menu.Item>
diff --git a/dist/components/Menu/Menu.svelte b/dist/components/Menu/Menu.svelte
index a48e70138b685b75d7ceefc02cce7de31c0b304f..fc8965ba882dfd356ed896f12c995be2ed3f75f7 100644
--- a/dist/components/Menu/Menu.svelte
+++ b/dist/components/Menu/Menu.svelte
@@ -1,6 +1,20 @@
 <script context="module">export const ctx = 'Menu';
 </script>
 
+<svelte:options
+  customElement={{
+    tag: 'sui-menu',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import useStyles, { getNextItem, getPreviousItem } from './Menu.styles';
 import { createEventDispatcher, onMount, setContext } from 'svelte';
 import { writable } from 'svelte/store';
@@ -11,7 +25,6 @@ import { Paper } from '../Paper';
 import { MenuIcon } from './index';
 import { clickoutside, useHash } from '@svelteuidev/composables';
 import { createEventForwarder, useActions } from '../../internal';
-import { get_current_component } from 'svelte/internal';
 export let use = [], element = undefined, className = '', override = {}, closeOnItemClick = true, closeOnScroll = false, delay = 100, menuButtonLabel = undefined, menuId = undefined, radius = 'sm', opened = false, shadow = 'md', size = 'md', trigger = 'click', trapFocus = true, withinPortal = true, zIndex = 300, withArrow = false, gutter = 5, placement = 'start', position = 'bottom', transition = 'fade', transitionOptions = { duration: 100 };
 export { className as class };
 const dispatch = createEventDispatcher();
@@ -48,11 +61,13 @@ const clickOutsideParams = {
     callback: () => _opened && !external && handleClose()
 };
 const uuid = useHash(menuId);
-const forwardEvents = createEventForwarder(get_current_component(), ['open', 'close']);
+let component;
+let forwardEvents;
 const castKeyboardEvent = (event) => event;
 // can be turned into an action
 const focusReference = () => window.setTimeout(() => referenceElement?.focus(), 0);
 onMount(() => {
+    forwardEvents = createEventForwarder(component, ['open', 'close']);
     if (!$$slots.control)
         return;
     control = element.children[0];
@@ -151,14 +166,14 @@ $: ({ cx, classes } = useStyles({ size }, { override, name: 'Menu' }));
 setContext(ctx, contextStore);
 </script>
 
-<svelte:window on:scroll={() => closeOnScroll && handleClose()} />
+<svelte:window onscroll={() => closeOnScroll && handleClose()} />
 
 <Box
 	bind:element
 	use={[forwardEvents, [useActions, use], [clickoutside, clickOutsideParams]]}
 	class={cx(classes.root, className)}
-	on:mouseleave={handleMouseLeave}
-	on:mouseenter={handleMouseEnter}
+	onmouseleave={handleMouseLeave}
+	onmouseenter={handleMouseEnter}
 	{...$$restProps}
 >
 	<slot name="control">
@@ -170,9 +185,9 @@ setContext(ctx, contextStore);
 			aria-controls={uuid}
 			aria-label={menuButtonLabel}
 			title={menuButtonLabel}
-			on:click!stopPropagation={toggleMenu}
-			on:keydown={(event) => handleKeyDown(castKeyboardEvent(event))}
-			on:mouseenter={() => (trigger === 'hover' ? handleOpen() : null)}
+			onclick={(ev) => {ev.stopPropagation(); toggleMenu(ev)}}
+			onkeydown={(event) => handleKeyDown(castKeyboardEvent(event))}
+			onmouseenter={() => (trigger === 'hover' ? handleOpen() : null)}
 		/>
 	</slot>
 	<PopperContainer {withinPortal}>
@@ -197,7 +212,7 @@ setContext(ctx, contextStore);
 				class={cx(classes.body)}
 				aria-orientation="vertical"
 				{radius}
-				on:mouseleave={() => (hovered = -1)}
+				onmouseleave={() => (hovered = -1)}
 				{shadow}
 			>
 				<slot />
diff --git a/dist/components/Menu/Menu.svelte.d.ts b/dist/components/Menu/Menu.svelte.d.ts
index 461de01de3e130e2871714efbed6fd935034ea07..56505d2a26a54bf2084abb2663e53f779869ceaf 100644
--- a/dist/components/Menu/Menu.svelte.d.ts
+++ b/dist/components/Menu/Menu.svelte.d.ts
@@ -156,113 +156,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
         position?: "bottom" | "left" | "right" | "top";
         withArrow?: boolean;
         gutter?: number;
diff --git a/dist/components/Menu/MenuIcon.svelte b/dist/components/Menu/MenuIcon.svelte
index 7987ed7b83127794d2f31c5bf21c9c36541bdbd7..86cdf7a5a094533940c2b4358a4ee55de732f6b5 100644
--- a/dist/components/Menu/MenuIcon.svelte
+++ b/dist/components/Menu/MenuIcon.svelte
@@ -1,11 +1,27 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-menu-icon',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import { createEventForwarder, useActions } from '../../internal';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 import { ActionIcon } from '../ActionIcon';
 export let element = undefined;
 export let size = 15;
 export let className = '';
 export { className as class };
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 </script>
 
 <ActionIcon
diff --git a/dist/components/Menu/MenuIcon.svelte.d.ts b/dist/components/Menu/MenuIcon.svelte.d.ts
index 02124de9f3a1034f906bee1acc9aeddcc2269957..57b2c8249f4e5101bcf867599dd80e6c8b1ddb7b 100644
--- a/dist/components/Menu/MenuIcon.svelte.d.ts
+++ b/dist/components/Menu/MenuIcon.svelte.d.ts
@@ -97,113 +97,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLButtonElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLButtonElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement>;
         loaderProps?: import("..").LoaderProps;
         external?: boolean;
         formaction?: string;
diff --git a/dist/components/Menu/MenuItem/MenuItem.svelte b/dist/components/Menu/MenuItem/MenuItem.svelte
index a2fc36754919d8c9444abde8666c4848ea47b250..9470e0274aca026bef03d5632f7ba599d342d1c9 100644
--- a/dist/components/Menu/MenuItem/MenuItem.svelte
+++ b/dist/components/Menu/MenuItem/MenuItem.svelte
@@ -1,5 +1,19 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-menu-item',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import { getContext } from 'svelte';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../../internal';
 import { Box } from '../../Box';
 import IconRenderer from '../../IconRenderer/IconRenderer.svelte';
@@ -8,7 +22,9 @@ import useStyles, { getContextItemIndex } from './MenuItem.styles';
 export let use = [], element = undefined, className = '', override = {}, root = 'button', color = undefined, disabled = false, icon = undefined, iconSize = undefined, iconProps = undefined;
 export { className as class };
 const state = getContext(ctx);
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 const castKeyboardEvent = (event) => event;
 $: itemIndex = getContextItemIndex({ elementSelector: '.svelteui-MenuItem-root', parentClassName: 'svelteui-Menu-body' }, element);
 $: ({ cx, classes } = useStyles({ color, radius }, { override, name: 'MenuItem' }));
@@ -25,10 +41,10 @@ $: ({ hovered, radius, onItemClick, onItemHover, onItemKeyDown } = $state);
 		itemHovered: hovered === itemIndex
 	})}
 	{disabled}
-	on:mouseenter={() => !disabled && onItemHover(itemIndex)}
-	on:mouseleave={() => onItemHover(-1)}
-	on:keydown={(event) => onItemKeyDown(castKeyboardEvent(event))}
-	on:click={onItemClick}
+	onmouseenter={() => !disabled && onItemHover(itemIndex)}
+	onmouseleave={() => onItemHover(-1)}
+	onkeydown={(event) => onItemKeyDown(castKeyboardEvent(event))}
+	onclick={onItemClick}
 	{...$$restProps}
 >
 	<div class={classes.itemInner}>
diff --git a/dist/components/Menu/MenuItem/MenuItem.svelte.d.ts b/dist/components/Menu/MenuItem/MenuItem.svelte.d.ts
index 434542cb1565664a89da9201704f50f3e81aebde..32f085b7f7f4045dff01f10242761dfab26f2610 100644
--- a/dist/components/Menu/MenuItem/MenuItem.svelte.d.ts
+++ b/dist/components/Menu/MenuItem/MenuItem.svelte.d.ts
@@ -138,117 +138,117 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement> & import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLButtonElement> & import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLButtonElement> & import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLButtonElement> & import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLButtonElement> & import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLButtonElement> & import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLButtonElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLAnchorElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLButtonElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLAnchorElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement> & import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLButtonElement> & import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLButtonElement> & import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLButtonElement> & import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLButtonElement> & import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLButtonElement> & import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLButtonElement> & import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLButtonElement> & import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLButtonElement> & import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLButtonElement> & import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLButtonElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLButtonElement> & import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLButtonElement> & import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
         form?: string;
         formaction?: string;
         formenctype?: string;
diff --git a/dist/components/Menu/MenuLabel/MenuLabel.svelte.d.ts b/dist/components/Menu/MenuLabel/MenuLabel.svelte.d.ts
index e89ddf2b3bec7b5a6b046b9a760dd7db507eaa51..363ccbb45d8e8ae1bed17f89eb38967945f751ca 100644
--- a/dist/components/Menu/MenuLabel/MenuLabel.svelte.d.ts
+++ b/dist/components/Menu/MenuLabel/MenuLabel.svelte.d.ts
@@ -102,113 +102,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLAnchorElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLAnchorElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
         tracking?: import("../../Text").Tracking;
         align?: import("../../../styles").SvelteUITextAlignment;
         placeholder?: string;
diff --git a/dist/components/Modal/Modal.stories.svelte b/dist/components/Modal/Modal.stories.svelte
index ec693c2abfa90e0f93dd49a9509eb2d9f43374b7..31e956ebac2bcc2320bb013595fc6f9cd325da5e 100644
--- a/dist/components/Modal/Modal.stories.svelte
+++ b/dist/components/Modal/Modal.stories.svelte
@@ -17,8 +17,8 @@ const content = Array(100)
 <Meta title="Components/Modal" component={Modal} />
 
 <Template let:args>
-	<Button on:click={toggleOpen}>Click Me</Button>
-	<Modal {opened} on:close={handleClose} {...args}>
+	<Button onclick={toggleOpen}>Click Me</Button>
+	<Modal {opened} onclose={handleClose} {...args}>
 		<Stack>
 			<TextInput autofocus placeholder="Your name" label="Full name" />
 			<NativeSelect
@@ -34,8 +34,8 @@ const content = Array(100)
 <Story name="Modal" id="modalStory" />
 
 <Story name="With Overflow" id="modalOverflowStory">
-	<Button on:click={toggleOpen}>Click Me</Button>
-	<Modal {opened} on:close={handleClose} overflow="inside">
+	<Button onclick={toggleOpen}>Click Me</Button>
+	<Modal {opened} onclose={handleClose} overflow="inside">
 		{#each content as _}
 			<p>{_}</p>
 		{/each}
diff --git a/dist/components/Modal/Modal.svelte b/dist/components/Modal/Modal.svelte
index 690cbb1e13af1b9706f1c2ab0340f3dc2d81b774..ef10aeaa544f3a07000807aab00a8568e05d6afe 100644
--- a/dist/components/Modal/Modal.svelte
+++ b/dist/components/Modal/Modal.svelte
@@ -62,7 +62,7 @@ $: ({ cx, classes, getStyles } = useStyles({ centered, overflow, size, zIndex },
 				role="presentation"
 				class={classes.inner}
 				use:lockscroll={lockScroll}
-				on:keydown|capture={(event) => {
+				onkeydowncapture={(event) => {
 					const shouldTrigger =
 						castAny(event.target)?.getAttribute('data-svelteui-stop-propagation') !== 'true';
 					shouldTrigger && event.code === 'Escape' && closeOnEscape && onClose();
@@ -92,7 +92,7 @@ $: ({ cx, classes, getStyles } = useStyles({ centered, overflow, size, zIndex },
 								{#if withCloseButton}
 									<CloseButton
 										iconSize={16}
-										on:click={onClose}
+										onclick={onClose}
 										aria-label={closeButtonLabel}
 										class={classes.close}
 									/>
@@ -110,7 +110,7 @@ $: ({ cx, classes, getStyles } = useStyles({ centered, overflow, size, zIndex },
 					class={classes.overlay}
 					override={{ position: 'fixed' }}
 					zIndex={0}
-					on:mousedown={() => closeOnClickOutside && onClose()}
+					onmousedown={() => closeOnClickOutside && onClose()}
 					blur={overlayBlur}
 					color={overlayColor || 'black'}
 					opacity={_overlayOpacity}
diff --git a/dist/components/Modal/Modal.svelte.d.ts b/dist/components/Modal/Modal.svelte.d.ts
index 514c9894de9d47c3dd3ef29ea5b500f590f9c235..7717ab92da727e52b2e98836c9002f78682d0da2 100644
--- a/dist/components/Modal/Modal.svelte.d.ts
+++ b/dist/components/Modal/Modal.svelte.d.ts
@@ -156,113 +156,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     slots: {
         title: {};
diff --git a/dist/components/NativeSelect/NativeSelect.svelte b/dist/components/NativeSelect/NativeSelect.svelte
index 9895463a1ab8c83fa69af8e685ea1545fd07c466..c23214fb0e9ef3e5cb5e0673163f7b069ce2910c 100644
--- a/dist/components/NativeSelect/NativeSelect.svelte
+++ b/dist/components/NativeSelect/NativeSelect.svelte
@@ -1,6 +1,20 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-native-select',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import { randomID } from '../../styles';
 import { createEventForwarder, useActions } from '../../internal';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 import Input from '../Input/Input.svelte';
 import InputWrapper from '../InputWrapper/InputWrapper.svelte';
 import ChevronUpDown from './ChevronUpDown.svelte';
@@ -13,7 +27,9 @@ let formattedData = [];
 $: data &&
     (formattedData = data.map((item) => typeof item === 'string' ? { label: item, value: item } : item));
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 /** When no icon is present give the left section 12px of padding*/
 const base = { '& .input': { paddingLeft: 12 } };
 </script>
diff --git a/dist/components/NativeSelect/NativeSelect.svelte.d.ts b/dist/components/NativeSelect/NativeSelect.svelte.d.ts
index 86cad4adba39c917851bbc6e21930cb558721d49..e8c700bb33c0d2c1789928e7f391386e825212fc 100644
--- a/dist/components/NativeSelect/NativeSelect.svelte.d.ts
+++ b/dist/components/NativeSelect/NativeSelect.svelte.d.ts
@@ -113,117 +113,117 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").ChangeEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLSelectElement> & import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").ChangeEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLSelectElement> & import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLSelectElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLSelectElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLSelectElement> & import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLSelectElement> & import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
         autocomplete?: string;
         'bind:value'?: any;
         accesskey?: string;
diff --git a/dist/components/Notification/Notification.svelte b/dist/components/Notification/Notification.svelte
index a5cc6f240653fb31ab9f99e51be43b14acf66c1e..895653dbb3de83650ce3cd976b9fc4f754098e81 100644
--- a/dist/components/Notification/Notification.svelte
+++ b/dist/components/Notification/Notification.svelte
@@ -50,7 +50,7 @@ $: ({ cx, classes } = useStyles({ color, radius }, { override, name: 'Notificati
 			size={28}
 			{iconSize}
 			{...closeButtonProps}
-			on:click={onClose}
+			onclick={onClose}
 		/>
 	{/if}
 </Box>
diff --git a/dist/components/Notification/Notification.svelte.d.ts b/dist/components/Notification/Notification.svelte.d.ts
index 9596378b9b0c1851a3ebaf68e04c2b65e0decf4c..d3080961693af44592a6f9f3b4961bfc9b2a667f 100644
--- a/dist/components/Notification/Notification.svelte.d.ts
+++ b/dist/components/Notification/Notification.svelte.d.ts
@@ -142,113 +142,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     slots: {
         icon: {};
diff --git a/dist/components/NumberInput/NumberInput.svelte b/dist/components/NumberInput/NumberInput.svelte
index e4964724a21d8cb11fbbc0a6beb56ec5f4d51511..bfd6964c3f2c2057fc921f4aa5728af3d5d9d433 100644
--- a/dist/components/NumberInput/NumberInput.svelte
+++ b/dist/components/NumberInput/NumberInput.svelte
@@ -1,5 +1,18 @@
-<script>import { createEventDispatcher } from 'svelte';
-import { get_current_component } from 'svelte/internal';
+<svelte:options
+  customElement={{
+    tag: 'sui-number-input',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
+<script>import { createEventDispatcher, onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 import { TextInput } from '../TextInput';
 import useStyles from './NumberInput.styles';
@@ -15,7 +28,9 @@ export function decrement() {
     onStep(false, false);
 }
 const dispatch = createEventDispatcher();
-const forwardEvents = createEventForwarder(get_current_component(), ['change']);
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component, ['change']));
 let isKeyDown = false;
 let stepCount = 0;
 let holdTimeout = null;
@@ -155,10 +170,10 @@ values and add custom parsers and formatters.
 	showRightSection={showControls}
 	{...$$restProps}
 	bind:element
-	on:input={onInput}
-	on:keyup={onKeyUp}
-	on:keydown={onKeyDown}
-	on:blur={onBlur}
+	oninput={onInput}
+	onkeyup={onKeyUp}
+	onkeydown={onKeyDown}
+	onblur={onBlur}
 	use={[forwardEvents, [useActions, use]]}
 >
 	<slot slot="icon" name="icon" />
@@ -173,9 +188,9 @@ values and add custom parsers and formatters.
 				tabIndex={-1}
 				aria-hidden
 				disabled={value >= max}
-				on:mousedown={() => onStep(true)}
-				on:mouseup={onStepDone}
-				on:mouseleave={onStepDone}
+				onmousedown={() => onStep(true)}
+				onmouseup={onStepDone}
+				onmouseleave={onStepDone}
 			/>
 			<button
 				class={cx(classes.control, classes.controlDown)}
@@ -183,9 +198,9 @@ values and add custom parsers and formatters.
 				tabIndex={-1}
 				aria-hidden
 				disabled={value <= min}
-				on:mousedown={() => onStep(false)}
-				on:mouseup={onStepDone}
-				on:mouseleave={onStepDone}
+				onmousedown={() => onStep(false)}
+				onmouseup={onStepDone}
+				onmouseleave={onStepDone}
 			/>
 		{/if}
 	</div>
diff --git a/dist/components/NumberInput/NumberInput.svelte.d.ts b/dist/components/NumberInput/NumberInput.svelte.d.ts
index 253990263b5ab20cdd7743689aeca419b1583ce9..17d862406a2060dd47c4fe985b5d05d58e5e7f3e 100644
--- a/dist/components/NumberInput/NumberInput.svelte.d.ts
+++ b/dist/components/NumberInput/NumberInput.svelte.d.ts
@@ -125,21 +125,21 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement> & import("svelte/elements").ChangeEventHandler<HTMLSelectElement> & import("svelte/elements").ChangeEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement> & import("svelte/elements").EventHandler<InputEvent, HTMLSelectElement> & import("svelte/elements").EventHandler<InputEvent, HTMLTextAreaElement> & import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement> & import("svelte/elements").ChangeEventHandler<HTMLSelectElement> & import("svelte/elements").ChangeEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement> & import("svelte/elements").EventHandler<InputEvent, HTMLSelectElement> & import("svelte/elements").EventHandler<InputEvent, HTMLTextAreaElement> & import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLInputElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
@@ -148,8 +148,8 @@ declare const __propDef: {
         }, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLInputElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
@@ -158,92 +158,92 @@ declare const __propDef: {
         }, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement> & import("svelte/elements").WheelEventHandler<HTMLSelectElement> & import("svelte/elements").WheelEventHandler<HTMLTextAreaElement> & import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement> & import("svelte/elements").WheelEventHandler<HTMLSelectElement> & import("svelte/elements").WheelEventHandler<HTMLTextAreaElement> & import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
         iconProps?: {
             size: number;
             color: string;
diff --git a/dist/components/ObserverRender/ObserverRender.svelte b/dist/components/ObserverRender/ObserverRender.svelte
index 0f8a26ef5608c7d531f58d8204689f095923d8c8..defe4ac7d1d4a1ab0e99bdce7d8ae67eb6c9f6e5 100644
--- a/dist/components/ObserverRender/ObserverRender.svelte
+++ b/dist/components/ObserverRender/ObserverRender.svelte
@@ -15,7 +15,7 @@ let node = null;
 	class={className}
 	css={{ ...override }}
 	{...$$restProps}
-	on:change={(event) => {
+	onchange={(event) => {
 		const {
 			inView,
 			entry: _entry,
@@ -29,7 +29,7 @@ let node = null;
 		observer = _observer;
 		node = _node;
 	}}
-	on:enter={(event) => {
+	onenter={(event) => {
 		const {
 			inView,
 			entry: _entry,
@@ -43,7 +43,7 @@ let node = null;
 		observer = _observer;
 		node = _node;
 	}}
-	on:leave={(event) => {
+	onleave={(event) => {
 		const {
 			inView,
 			entry: _entry,
@@ -57,7 +57,7 @@ let node = null;
 		observer = _observer;
 		node = _node;
 	}}
-	on:init={(event) => {
+	oninit={(event) => {
 		const { observer: _observer, node: _node } = event.detail;
 		observer = _observer;
 		node = _node;
diff --git a/dist/components/ObserverRender/ObserverRender.svelte.d.ts b/dist/components/ObserverRender/ObserverRender.svelte.d.ts
index 95f67f2b517d0e16a8b59b11ff456c215b8c993c..f384d17f43a558721276f85876c35b0927e3354f 100644
--- a/dist/components/ObserverRender/ObserverRender.svelte.d.ts
+++ b/dist/components/ObserverRender/ObserverRender.svelte.d.ts
@@ -112,21 +112,21 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement> & import("svelte/elements").ChangeEventHandler<HTMLSelectElement> & import("svelte/elements").ChangeEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement> & import("svelte/elements").EventHandler<InputEvent, HTMLSelectElement> & import("svelte/elements").EventHandler<InputEvent, HTMLTextAreaElement> & import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement> & import("svelte/elements").ChangeEventHandler<HTMLSelectElement> & import("svelte/elements").ChangeEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement> & import("svelte/elements").EventHandler<InputEvent, HTMLSelectElement> & import("svelte/elements").EventHandler<InputEvent, HTMLTextAreaElement> & import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLInputElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
@@ -135,8 +135,8 @@ declare const __propDef: {
         }, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLInputElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
@@ -145,92 +145,92 @@ declare const __propDef: {
         }, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement> & import("svelte/elements").WheelEventHandler<HTMLSelectElement> & import("svelte/elements").WheelEventHandler<HTMLTextAreaElement> & import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement> & import("svelte/elements").WheelEventHandler<HTMLSelectElement> & import("svelte/elements").WheelEventHandler<HTMLTextAreaElement> & import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
         iconProps?: {
             size: number;
             color: string;
diff --git a/dist/components/Overlay/Overlay.svelte b/dist/components/Overlay/Overlay.svelte
index 9be87c2aa600b9099399f5722f5d79ded8b8049e..8fea0c0717342cbda8a7fb669395eab3df029f4e 100644
--- a/dist/components/Overlay/Overlay.svelte
+++ b/dist/components/Overlay/Overlay.svelte
@@ -1,4 +1,18 @@
-<script>import { get_current_component } from 'svelte/internal';
+<svelte:options
+  customElement={{
+    tag: 'sui-overlay',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
+<script>import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 import Box from '../Box/Box.svelte';
 import Center from '../Center/Center.svelte';
@@ -6,7 +20,9 @@ import { getDefaultZIndex } from './Overlay.styles';
 export let use = [], element = undefined, className = '', override = {}, opacity = 0.6, color = '#fff', blur = 0, gradient = '', zIndex = getDefaultZIndex('modal'), radius = 0, center = false;
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 $: background = gradient ? { backgroundImage: gradient } : { backgroundColor: color };
 $: baseStyles = {
     position: 'absolute',
diff --git a/dist/components/Overlay/Overlay.svelte.d.ts b/dist/components/Overlay/Overlay.svelte.d.ts
index 1f828f0abeab033c8d41784a283b11767278b76c..db999a80267d606aa3f1ebdc68287db812984917 100644
--- a/dist/components/Overlay/Overlay.svelte.d.ts
+++ b/dist/components/Overlay/Overlay.svelte.d.ts
@@ -94,113 +94,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
         placeholder?: string;
         accesskey?: string;
         contenteditable?: "inherit" | import("svelte/elements").Booleanish;
diff --git a/dist/components/Paper/Paper.svelte.d.ts b/dist/components/Paper/Paper.svelte.d.ts
index fcb000e7d8d103f5d5871162c7b189b0ced19d1e..da2d105e0e768d4f6afa09cc504c4d183ce18938 100644
--- a/dist/components/Paper/Paper.svelte.d.ts
+++ b/dist/components/Paper/Paper.svelte.d.ts
@@ -137,113 +137,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/PasswordInput/PasswordInput.svelte b/dist/components/PasswordInput/PasswordInput.svelte
index 274c7b987e3b490e351190c289f9071f5165d402..5578b11b7b1cf811f5bb1f7b6b76a7aed968f9e3 100644
--- a/dist/components/PasswordInput/PasswordInput.svelte
+++ b/dist/components/PasswordInput/PasswordInput.svelte
@@ -1,4 +1,18 @@
-<script>import { get_current_component } from 'svelte/internal';
+<svelte:options
+  customElement={{
+    tag: 'sui-password-input',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
+<script>import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 import { randomID } from '../../styles';
 import { Input } from '../Input';
@@ -10,7 +24,9 @@ export let use = [], element = undefined, className = '', override = {}, label =
 export { className as class };
 let uncontrolledVisible = defaultVisible !== undefined ? defaultVisible : false;
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 $: _invalid = invalid || !!error;
 $: _visible = visible === undefined ? uncontrolledVisible : visible;
 const toggleVisibility = () => {
@@ -75,7 +91,7 @@ Password input with visibility toggle
 					size={getButtonSize(size)}
 					aria-hidden={!visibilityToggleLabel}
 					aria-label={visibilityToggleLabel}
-					on:click={toggleVisibility}
+					onclick={toggleVisibility}
 				>
 					<slot name="visibilityToggleIcon" visible={_visible}>
 						<PasswordToggleIcon reveal={_visible} size={getIconSize(size)} />
diff --git a/dist/components/Popper/Popper.svelte b/dist/components/Popper/Popper.svelte
index c3bc3d7cbbf137867dbdd5c794b0df402ba4525c..405653dae846f870a937414fbddfc2e8540ac041 100644
--- a/dist/components/Popper/Popper.svelte
+++ b/dist/components/Popper/Popper.svelte
@@ -1,13 +1,30 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-popper',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import useStyles from './Popper.styles';
 import { calculateArrowPlacement } from './Popper.styles';
 import { arrow, autoUpdate, computePosition, offset, flip, shift } from '@floating-ui/dom';
-import { get_current_component, onDestroy } from 'svelte/internal';
+import { onDestroy } from 'svelte/internal';
+import { onMount } from 'svelte';
 import { createEventForwarder, getTransition, useActions } from '../../internal';
 export let use = [], element = undefined, className = '', override = {}, position = 'top', placement = 'center', gutter = 5, arrowSize = 3, arrowDistance = 3, arrowClassName = 'arrow', withArrow = false, zIndex = 1, transition = 'fade', transitionOptions = { duration: 100 }, exitTransition = transition, exitTransitionOptions = transitionOptions, mounted = false, reference = null;
 export { className as class };
 let cleanup = () => { };
 let arrowElement;
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 onDestroy(() => {
     cleanup();
 });
@@ -80,7 +97,7 @@ and placement options.
 @see https://svelteui.org/core/overlay
 @example
     ```svelte
-	<Button bind:element={ref} on:click={() => mounted = !mounted }>Click here</Button>
+	<Button bind:element={ref} onclick={() => mounted = !mounted }>Click here</Button>
 	<Popper
 		reference={ref}
 		placement="center"
diff --git a/dist/components/Popper/Popper.svelte.d.ts b/dist/components/Popper/Popper.svelte.d.ts
index 81cd91da55779a5551652a41e6eebf86c51e25fd..9870760788883ef3bc7eba9244798b27644463c6 100644
--- a/dist/components/Popper/Popper.svelte.d.ts
+++ b/dist/components/Popper/Popper.svelte.d.ts
@@ -148,113 +148,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
@@ -275,7 +275,7 @@ export type PopperSlots = typeof __propDef.slots;
  * @see https://svelteui.org/core/overlay
  * @example
  *    ```svelte
- * <Button bind:element={ref} on:click={() => mounted = !mounted }>Click here</Button>
+ * <Button bind:element={ref} onclick={() => mounted = !mounted }>Click here</Button>
  * <Popper
  * 	reference={ref}
  * 	placement="center"
diff --git a/dist/components/Portal/OptionalPortal.svelte.d.ts b/dist/components/Portal/OptionalPortal.svelte.d.ts
index ff92fe0c9a2290e4d00ff5c29e0ff6f746fd62c1..5dcc6d1e9024a955e60d5b2f49b19e75d9be1a76 100644
--- a/dist/components/Portal/OptionalPortal.svelte.d.ts
+++ b/dist/components/Portal/OptionalPortal.svelte.d.ts
@@ -137,113 +137,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Portal/Portal.svelte b/dist/components/Portal/Portal.svelte
index aff271814889221d18d6a3977ef93c997e93fb48..c1d06e8569ed8c2a4cd31df6ea2361d3184f1701 100644
--- a/dist/components/Portal/Portal.svelte
+++ b/dist/components/Portal/Portal.svelte
@@ -1,10 +1,26 @@
+<svelte:options
+  customElement={{
+    tag: 'sui-portal',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>import { createEventForwarder, useActions } from '../../internal';
-import { get_current_component } from 'svelte/internal';
+import { onMount } from 'svelte';
 import { portal } from '@svelteuidev/composables';
 export let use = [], element = undefined, className = '', target = 'body', position = 'relative', zIndex = 1;
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 </script>
 
 <div
diff --git a/dist/components/Portal/Portal.svelte.d.ts b/dist/components/Portal/Portal.svelte.d.ts
index 02f990557ab41430cbf98f463c157a91c6f108f0..40490772bf4072722315ca7eb39ef98de9628e94 100644
--- a/dist/components/Portal/Portal.svelte.d.ts
+++ b/dist/components/Portal/Portal.svelte.d.ts
@@ -136,113 +136,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Progress/Progress.svelte.d.ts b/dist/components/Progress/Progress.svelte.d.ts
index 2c6dead2dc767b39fec282469d77f9c35903a1e0..7ba54cfe8e8bfdfe154f22ba56e974d0e31b7338 100644
--- a/dist/components/Progress/Progress.svelte.d.ts
+++ b/dist/components/Progress/Progress.svelte.d.ts
@@ -148,113 +148,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Radio/Radio.svelte b/dist/components/Radio/Radio.svelte
index 7853113adb8549661715a220c0ce7812bd6d0ca6..b6939ffbcdc28a725474bfadc5396d8c3a503c97 100644
--- a/dist/components/Radio/Radio.svelte
+++ b/dist/components/Radio/Radio.svelte
@@ -1,7 +1,21 @@
 <script context="module">export const ctx = 'Radio';
 </script>
 
-<script>import { get_current_component } from 'svelte/internal';
+<svelte:options
+  customElement={{
+    tag: 'sui-radio',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
+<script>import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 import { randomID } from '../../styles';
 import Box from '../Box/Box.svelte';
@@ -9,7 +23,9 @@ import useStyles from './Radio.styles';
 export let use = [], element = undefined, className = '', override = {}, color = 'blue', id = randomID(), disabled = false, value = undefined, checked = false, label = '', error = false, labelDirection = 'left', size = 'sm', name = '', group = undefined;
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 $: ({ cx, classes, getStyles } = useStyles({ color, size, labelDirection, error }, { name: 'Radio' }));
 function onChange(e) {
     checked = e.target.checked;
@@ -58,7 +74,7 @@ Radio component.
 					{value}
 					{id}
 					{...$$restProps}
-					on:change={onChange}
+					onchange={onChange}
 					use:useActions={use}
 					use:forwardEvents
 				/>
diff --git a/dist/components/Radio/Radio.svelte.d.ts b/dist/components/Radio/Radio.svelte.d.ts
index 0b87e76bd8a551ae3c8d801e2a92bcdca06024c5..6a831128a223469349907edacf3688fdf94a0217 100644
--- a/dist/components/Radio/Radio.svelte.d.ts
+++ b/dist/components/Radio/Radio.svelte.d.ts
@@ -145,113 +145,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLInputElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLInputElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Radio/RadioGroup/RadioGroup.svelte b/dist/components/Radio/RadioGroup/RadioGroup.svelte
index b3bcd8b6b4619c99630c427cad133619e7992aec..f1156bd6eb3afb8a269643d2470762b5192e43cd 100644
--- a/dist/components/Radio/RadioGroup/RadioGroup.svelte
+++ b/dist/components/Radio/RadioGroup/RadioGroup.svelte
@@ -44,7 +44,7 @@ A Radio group component is a container for Radios.
 					{color}
 					{name}
 					{disabled}
-					on:change={(e) => onChanged(item.value, e.target)}
+					onchange={(e) => onChanged(item.value, e.target)}
 				/>
 			{/each}
 		{:else}
diff --git a/dist/components/Radio/RadioGroup/RadioGroup.svelte.d.ts b/dist/components/Radio/RadioGroup/RadioGroup.svelte.d.ts
index b4b135227bc6fd8712561e88484d541f3fe231af..d0469f00a496531f55d56d80a8c17a940c39096c 100644
--- a/dist/components/Radio/RadioGroup/RadioGroup.svelte.d.ts
+++ b/dist/components/Radio/RadioGroup/RadioGroup.svelte.d.ts
@@ -149,113 +149,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         change: CustomEvent<any>;
diff --git a/dist/components/SimpleGrid/SimpleGrid.svelte.d.ts b/dist/components/SimpleGrid/SimpleGrid.svelte.d.ts
index 6e9620ada41ae1841d85dacecc5eac412c4fe920..e6a9acb66250ee126e9c72a7ef50d932a70abc38 100644
--- a/dist/components/SimpleGrid/SimpleGrid.svelte.d.ts
+++ b/dist/components/SimpleGrid/SimpleGrid.svelte.d.ts
@@ -136,113 +136,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Skeleton/Skeleton.svelte.d.ts b/dist/components/Skeleton/Skeleton.svelte.d.ts
index 1e258af7b47c8df217337ce80577ef33e6ac2fd9..5f7f43fcf3f2672cab3e95a3c57e75090b2f620e 100644
--- a/dist/components/Skeleton/Skeleton.svelte.d.ts
+++ b/dist/components/Skeleton/Skeleton.svelte.d.ts
@@ -139,113 +139,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Space/Space.svelte.d.ts b/dist/components/Space/Space.svelte.d.ts
index e7501cdcd53a256722a3a1326f480b09afdf2fd6..2b8748aaebad9fe4e62042f6a27f6d8eda624385 100644
--- a/dist/components/Space/Space.svelte.d.ts
+++ b/dist/components/Space/Space.svelte.d.ts
@@ -135,113 +135,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Stack/Stack.svelte.d.ts b/dist/components/Stack/Stack.svelte.d.ts
index 73ff97f697b7a6d93170efc981feaf64867c15e6..10253116f08f97d1ff08f827e4e375618fdfc88c 100644
--- a/dist/components/Stack/Stack.svelte.d.ts
+++ b/dist/components/Stack/Stack.svelte.d.ts
@@ -136,113 +136,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Switch/Switch.svelte b/dist/components/Switch/Switch.svelte
index b2cecbe4a328f0e9ba31414e6acccc19dc6f6a51..75770635626c91322a39910b920f69f85f9d0912 100644
--- a/dist/components/Switch/Switch.svelte
+++ b/dist/components/Switch/Switch.svelte
@@ -1,11 +1,27 @@
-<script>import { get_current_component } from 'svelte/internal';
+<svelte:options
+  customElement={{
+    tag: 'sui-switch',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
+<script>import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 import { randomID } from '../../styles';
 import useStyles from './Switch.styles';
 export let use = [], element = undefined, className = '', override = {}, color = 'blue', size = 'sm', radius = 'xl', insideLabelSize = undefined, transitionFunction = 'linear', id = randomID(), label = '', onLabel = '', offLabel = '', disabled = false, checked = false;
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 $: ({ cx, classes, getStyles } = useStyles({
     color,
     offLabel,
diff --git a/dist/components/Switch/Switch.svelte.d.ts b/dist/components/Switch/Switch.svelte.d.ts
index efbe3d009e0a481944e6f9610e679b69cd4ff0e1..074ca7cd6bb9f5fa85a34199ffe3fabdab26aa16 100644
--- a/dist/components/Switch/Switch.svelte.d.ts
+++ b/dist/components/Switch/Switch.svelte.d.ts
@@ -110,113 +110,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
-        'on:change'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement>;
+        'onchange'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLInputElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLInputElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLInputElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLInputElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLInputElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement>;
         accept?: string;
         alt?: string;
         autocomplete?: string;
diff --git a/dist/components/Tabs/Tab/Tab.svelte.d.ts b/dist/components/Tabs/Tab/Tab.svelte.d.ts
index 5f5be96c397838d5906c09aa3861cf886ea26fc2..958f1e3c912e9a42e48bf04011872e89a28a436d 100644
--- a/dist/components/Tabs/Tab/Tab.svelte.d.ts
+++ b/dist/components/Tabs/Tab/Tab.svelte.d.ts
@@ -141,113 +141,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Tabs/Tabs.svelte.d.ts b/dist/components/Tabs/Tabs.svelte.d.ts
index e99c7390473f4d9bfdded31702f7b570f00d69c1..79f73c1e097980e1162f699fd6437f4aeac606be 100644
--- a/dist/components/Tabs/Tabs.svelte.d.ts
+++ b/dist/components/Tabs/Tabs.svelte.d.ts
@@ -142,113 +142,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     slots: {
         default: {};
diff --git a/dist/components/Text/Text.svelte b/dist/components/Text/Text.svelte
index 7f0bfd30edd947ba00bc4f1067e413083aa646f4..9d3058a0a118ccb84aca290446a869fa9a1f5dc1 100644
--- a/dist/components/Text/Text.svelte
+++ b/dist/components/Text/Text.svelte
@@ -1,4 +1,18 @@
-<script>import { get_current_component } from 'svelte/internal';
+<svelte:options
+  customElement={{
+    tag: 'sui-text',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
+<script>import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 import Error from '../../internal/errors/Error.svelte';
 import { Box } from '../Box';
@@ -7,7 +21,9 @@ import { TextErrors } from './Text.errors';
 export let use = [], element = undefined, className = '', override = {}, align = 'left', color = 'dark', root = undefined, transform = 'none', variant = 'text', size = 'md', weight = 'normal', gradient = { from: 'indigo', to: 'cyan', deg: 45 }, inline = true, lineClamp = undefined, underline = false, inherit = false, href = '', tracking = 'normal';
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 // --------------Error Handling-------------------
 let observable = false;
 let err;
diff --git a/dist/components/Text/Text.svelte.d.ts b/dist/components/Text/Text.svelte.d.ts
index b471bc8c43fead0483b5a9cd91204b269c8d817e..56fb56ff54c76f92c7e69b41bfe6cb2e1f261991 100644
--- a/dist/components/Text/Text.svelte.d.ts
+++ b/dist/components/Text/Text.svelte.d.ts
@@ -156,113 +156,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLAnchorElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLAnchorElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/TextInput/TextInput.svelte b/dist/components/TextInput/TextInput.svelte
index 500cbb3b1793038423ea5c34e03d213cf04e89ae..d99266d64b05f2e97add83fbba083f09ef378921 100644
--- a/dist/components/TextInput/TextInput.svelte
+++ b/dist/components/TextInput/TextInput.svelte
@@ -1,4 +1,18 @@
-<script>import { get_current_component } from 'svelte/internal';
+<svelte:options
+  customElement={{
+    tag: 'sui-text-input',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
+<script>import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 import { randomID } from '../../styles';
 import { Input } from '../Input';
@@ -6,7 +20,9 @@ import { InputWrapper } from '../InputWrapper';
 export let use = [], element = undefined, className = '', override = {}, label = '', description = null, error = null, required = false, labelProps = {}, descriptionProps = {}, errorProps = {}, invalid = false, id = randomID('text-input'), labelElement = 'label', size = 'sm', showRightSection = undefined, value = '', placeholder = '';
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 // Flag that enables the override of the right section slot
 // of the Input component only if it was provided
 const _showRightSection = showRightSection === undefined ? !!$$slots.rightSection : showRightSection;
@@ -31,7 +47,7 @@ Input for text that also uses labels for the input
         placeholder='Your name'
         label='Full name'
         size='lg'
-        on:change={onChange}
+        onchange={onChange}
     />
     ```
 -->
diff --git a/dist/components/TextInput/TextInput.svelte.d.ts b/dist/components/TextInput/TextInput.svelte.d.ts
index f878c8927890f61ae371fd79abae71b060ed5860..16322c0b2bf8b12dacac60daaf1543a4db02840b 100644
--- a/dist/components/TextInput/TextInput.svelte.d.ts
+++ b/dist/components/TextInput/TextInput.svelte.d.ts
@@ -123,21 +123,21 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement> & import("svelte/elements").ChangeEventHandler<HTMLSelectElement> & import("svelte/elements").ChangeEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement> & import("svelte/elements").EventHandler<InputEvent, HTMLSelectElement> & import("svelte/elements").EventHandler<InputEvent, HTMLTextAreaElement> & import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLInputElement> & import("svelte/elements").ClipboardEventHandler<HTMLSelectElement> & import("svelte/elements").ClipboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLInputElement> & import("svelte/elements").CompositionEventHandler<HTMLSelectElement> & import("svelte/elements").CompositionEventHandler<HTMLTextAreaElement> & import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLInputElement> & import("svelte/elements").FocusEventHandler<HTMLSelectElement> & import("svelte/elements").FocusEventHandler<HTMLTextAreaElement> & import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").ChangeEventHandler<HTMLInputElement> & import("svelte/elements").ChangeEventHandler<HTMLSelectElement> & import("svelte/elements").ChangeEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLInputElement> & import("svelte/elements").EventHandler<InputEvent, HTMLSelectElement> & import("svelte/elements").EventHandler<InputEvent, HTMLTextAreaElement> & import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLInputElement> & import("svelte/elements").FormEventHandler<HTMLSelectElement> & import("svelte/elements").FormEventHandler<HTMLTextAreaElement> & import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLInputElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
@@ -146,8 +146,8 @@ declare const __propDef: {
         }, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLInputElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
@@ -156,92 +156,92 @@ declare const __propDef: {
         }, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement> & import("svelte/elements").WheelEventHandler<HTMLSelectElement> & import("svelte/elements").WheelEventHandler<HTMLTextAreaElement> & import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLInputElement> & import("svelte/elements").KeyboardEventHandler<HTMLSelectElement> & import("svelte/elements").KeyboardEventHandler<HTMLTextAreaElement> & import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLInputElement> & import("svelte/elements").DragEventHandler<HTMLSelectElement> & import("svelte/elements").DragEventHandler<HTMLTextAreaElement> & import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLInputElement> & import("svelte/elements").MouseEventHandler<HTMLSelectElement> & import("svelte/elements").MouseEventHandler<HTMLTextAreaElement> & import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLInputElement> & import("svelte/elements").TouchEventHandler<HTMLSelectElement> & import("svelte/elements").TouchEventHandler<HTMLTextAreaElement> & import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLInputElement> & import("svelte/elements").PointerEventHandler<HTMLSelectElement> & import("svelte/elements").PointerEventHandler<HTMLTextAreaElement> & import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLInputElement> & import("svelte/elements").UIEventHandler<HTMLSelectElement> & import("svelte/elements").UIEventHandler<HTMLTextAreaElement> & import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLInputElement> & import("svelte/elements").WheelEventHandler<HTMLSelectElement> & import("svelte/elements").WheelEventHandler<HTMLTextAreaElement> & import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLInputElement> & import("svelte/elements").AnimationEventHandler<HTMLSelectElement> & import("svelte/elements").AnimationEventHandler<HTMLTextAreaElement> & import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLInputElement> & import("svelte/elements").TransitionEventHandler<HTMLSelectElement> & import("svelte/elements").TransitionEventHandler<HTMLTextAreaElement> & import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLInputElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLSelectElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLTextAreaElement> & import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLInputElement> & import("svelte/elements").MessageEventHandler<HTMLSelectElement> & import("svelte/elements").MessageEventHandler<HTMLTextAreaElement> & import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLInputElement> & import("svelte/elements").EventHandler<Event, HTMLSelectElement> & import("svelte/elements").EventHandler<Event, HTMLTextAreaElement> & import("svelte/elements").EventHandler<Event, HTMLElement>;
         accept?: string;
         alt?: string;
         checked?: boolean;
@@ -347,7 +347,7 @@ export type TextInputSlots = typeof __propDef.slots;
  *     placeholder='Your name'
  *     label='Full name'
  *     size='lg'
- *     on:change={onChange}
+ *     onchange={onChange}
  * />
  * ```
  */
diff --git a/dist/components/Textarea/Textarea.svelte b/dist/components/Textarea/Textarea.svelte
index e94ae9b35d3ef6385205fec910e488aa70c8f9a6..277d2ba11817128bec350038d339a24ac61d934a 100644
--- a/dist/components/Textarea/Textarea.svelte
+++ b/dist/components/Textarea/Textarea.svelte
@@ -1,4 +1,18 @@
-<script>import { get_current_component } from 'svelte/internal';
+<svelte:options
+  customElement={{
+    tag: 'sui-text-area',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
+<script>import { onMount } from 'svelte';
 import { createEventForwarder, useActions } from '../../internal';
 import { randomID } from '../../styles';
 import { Input } from '../Input';
@@ -6,7 +20,9 @@ import { InputWrapper } from '../InputWrapper';
 export let use = [], element = undefined, className = '', override = {}, label = '', description = null, error = null, required = false, labelProps = {}, descriptionProps = {}, errorProps = {}, invalid = false, id = randomID('textarea'), labelElement = 'label', showRightSection = undefined, value = '', placeholder = '';
 export { className as class };
 /** An action that forwards inner dom node events from parent component */
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 // Flag that enables the override of the right section slot
 // of the Input component only if it was provided
 const _showRightSection = showRightSection === undefined ? !!$$slots.rightSection : showRightSection;
diff --git a/dist/components/ThemeIcon/ThemeIcon.svelte.d.ts b/dist/components/ThemeIcon/ThemeIcon.svelte.d.ts
index cab0e5c062bf87ed3e8e9cd6ea516749aa3ab1ca..9aa5c10a19face738526e77c32b6dcc5173e7d5b 100644
--- a/dist/components/ThemeIcon/ThemeIcon.svelte.d.ts
+++ b/dist/components/ThemeIcon/ThemeIcon.svelte.d.ts
@@ -137,113 +137,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Timeline/Timeline.svelte.d.ts b/dist/components/Timeline/Timeline.svelte.d.ts
index 1b18b7d73c1140642b81571e53f190d5267306b8..6461bb79292f6f6d47bf4de4bb7957952bd52ef5 100644
--- a/dist/components/Timeline/Timeline.svelte.d.ts
+++ b/dist/components/Timeline/Timeline.svelte.d.ts
@@ -140,113 +140,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Title/Title.svelte.d.ts b/dist/components/Title/Title.svelte.d.ts
index f6a5b98715002415fe0cd791c4bc3f5c30a92bc9..c90a1ed0ad3d9e852f1a2acf1e8f553cf75d99b1 100644
--- a/dist/components/Title/Title.svelte.d.ts
+++ b/dist/components/Title/Title.svelte.d.ts
@@ -157,113 +157,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLAnchorElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLAnchorElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLAnchorElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLAnchorElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLAnchorElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLAnchorElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLAnchorElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLAnchorElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLAnchorElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLAnchorElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLAnchorElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLAnchorElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLAnchorElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLAnchorElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLAnchorElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLAnchorElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLAnchorElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLAnchorElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLAnchorElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/components/Tooltip/Tooltip.svelte b/dist/components/Tooltip/Tooltip.svelte
index 9edfe05cfcf841517c0ad209525fde07ca33e9b9..dfa90de32e60985a1104e720c371b93f439bb35b 100644
--- a/dist/components/Tooltip/Tooltip.svelte
+++ b/dist/components/Tooltip/Tooltip.svelte
@@ -44,10 +44,10 @@ $: ({ cx, classes, getStyles } = useStyles({ color, radius }, { name: 'Tooltip'
 
 <Box
 	bind:element
-	on:pointerenter={(event) => handleOpen(event)}
-	on:pointerleave={(event) => handleClose(event)}
-	on:focus!capture={handleOpen}
-	on:blur!capture={handleClose}
+	onpointerenter={(event) => handleOpen(event)}
+	onpointerleave={(event) => handleClose(event)}
+	onfocus={(ev) => {ev.capture(); handleOpen(ev);}}
+	onblur={(ev) => {ev.capture(); handleClose(ev);}}
 	class={cx(className, classes.root, getStyles({ css: override }))}
 	{use}
 	id={tooltipId}
diff --git a/dist/components/Tooltip/Tooltip.svelte.d.ts b/dist/components/Tooltip/Tooltip.svelte.d.ts
index bec66e721ec70cc811943b506a28b3fae574dcf5..3522e656d515d195bf63ba9709531df9a4f5b8f8 100644
--- a/dist/components/Tooltip/Tooltip.svelte.d.ts
+++ b/dist/components/Tooltip/Tooltip.svelte.d.ts
@@ -159,113 +159,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         mouseenter: CustomEvent<any>;
diff --git a/dist/components/TypographyProvider/TypographyProvider.svelte.d.ts b/dist/components/TypographyProvider/TypographyProvider.svelte.d.ts
index 87909ea9e59b35b20f38c1eb4abc1082c51a54d8..381989cc41fef582dbc773257777d40bfe550a41 100644
--- a/dist/components/TypographyProvider/TypographyProvider.svelte.d.ts
+++ b/dist/components/TypographyProvider/TypographyProvider.svelte.d.ts
@@ -135,113 +135,113 @@ declare const __propDef: {
         'aria-valuemin'?: number;
         'aria-valuenow'?: number;
         'aria-valuetext'?: string;
-        'on:copy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:cut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:paste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
-        'on:compositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:compositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
-        'on:focus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:focusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:blur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
-        'on:change'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:beforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
-        'on:input'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:reset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
-        'on:submit'?: import("svelte/elements").EventHandler<Event & {
+        'oncopy'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncut'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'onpaste'?: import("svelte/elements").ClipboardEventHandler<HTMLElement>;
+        'oncompositionend'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionstart'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'oncompositionupdate'?: import("svelte/elements").CompositionEventHandler<HTMLElement>;
+        'onfocus'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusin'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onfocusout'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onblur'?: import("svelte/elements").FocusEventHandler<HTMLElement>;
+        'onchange'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onbeforeinput'?: import("svelte/elements").EventHandler<InputEvent, HTMLElement>;
+        'oninput'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onreset'?: import("svelte/elements").FormEventHandler<HTMLElement>;
+        'onsubmit'?: import("svelte/elements").EventHandler<Event & {
             readonly submitter: HTMLElement;
         }, HTMLElement>;
-        'on:invalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:formdata'?: import("svelte/elements").EventHandler<Event & {
+        'oninvalid'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onformdata'?: import("svelte/elements").EventHandler<Event & {
             readonly formData: FormData;
         }, HTMLElement>;
-        'on:load'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:error'?: import("svelte/elements").EventHandler<Event, Element>;
-        'on:toggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:keydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:keyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
-        'on:abort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:canplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:durationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:emptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:encrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:loadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:pause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:play'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:playing'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:progress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:ratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:seeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:stalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:suspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:timeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:volumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:waiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:auxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:click'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:contextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:dblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:drag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:dragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:drop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
-        'on:mousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:mouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
-        'on:select'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:selectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:touchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:touchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
-        'on:gotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:pointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:lostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
-        'on:scroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:resize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
-        'on:wheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
-        'on:animationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:animationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
-        'on:transitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:transitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
-        'on:outrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:outroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introstart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:introend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
-        'on:message'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:messageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
-        'on:visibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:cancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:close'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
-        'on:fullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onload'?: import("svelte/elements").EventHandler<Event, Element>;
+        'onerror'?: import("svelte/elements").EventHandler<Event, Element>;
+        'ontoggle'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onkeydown'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeypress'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onkeyup'?: import("svelte/elements").KeyboardEventHandler<HTMLElement>;
+        'onabort'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncanplaythrough'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncuechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ondurationchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onemptied'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onencrypted'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onended'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadeddata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadedmetadata'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onloadstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onpause'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplay'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onplaying'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onprogress'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onratechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeked'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onseeking'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onstalled'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onsuspend'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontimeupdate'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onvolumechange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onwaiting'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onauxclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'oncontextmenu'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondblclick'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'ondrag'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragend'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragenter'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragexit'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragleave'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragover'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondragstart'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'ondrop'?: import("svelte/elements").DragEventHandler<HTMLElement>;
+        'onmousedown'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseenter'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseleave'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmousemove'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseout'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseover'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onmouseup'?: import("svelte/elements").MouseEventHandler<HTMLElement>;
+        'onselect'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectionchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onselectstart'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'ontouchcancel'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchend'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchmove'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ontouchstart'?: import("svelte/elements").TouchEventHandler<HTMLElement>;
+        'ongotpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointercancel'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerdown'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerenter'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerleave'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointermove'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerout'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerover'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onpointerup'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onlostpointercapture'?: import("svelte/elements").PointerEventHandler<HTMLElement>;
+        'onscroll'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onresize'?: import("svelte/elements").UIEventHandler<HTMLElement>;
+        'onwheel'?: import("svelte/elements").WheelEventHandler<HTMLElement>;
+        'onanimationstart'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationend'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'onanimationiteration'?: import("svelte/elements").AnimationEventHandler<HTMLElement>;
+        'ontransitionstart'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionrun'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitionend'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'ontransitioncancel'?: import("svelte/elements").TransitionEventHandler<HTMLElement>;
+        'onoutrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onoutroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintrostart'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onintroend'?: import("svelte/elements").EventHandler<CustomEvent<null>, HTMLElement>;
+        'onmessage'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onmessageerror'?: import("svelte/elements").MessageEventHandler<HTMLElement>;
+        'onvisibilitychange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'oncancel'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onclose'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenchange'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
+        'onfullscreenerror'?: import("svelte/elements").EventHandler<Event, HTMLElement>;
     };
     events: {
         [evt: string]: CustomEvent<any>;
diff --git a/dist/internal/utils/forwarding/forward-events.js b/dist/internal/utils/forwarding/forward-events.js
index 9d9fe7ebd35d7de60c4ff800f8bf1838ea76b32e..bbf71910a228925b653cfd033c59467e5b6933c5 100644
--- a/dist/internal/utils/forwarding/forward-events.js
+++ b/dist/internal/utils/forwarding/forward-events.js
@@ -1,8 +1,34 @@
 /* eslint-disable @typescript-eslint/no-empty-function */
 /* eslint-disable @typescript-eslint/no-explicit-any */
-import { bubble, listen, prevent_default, stop_propagation } from 'svelte/internal';
 const MODIFIER_DIVIDER = '!';
 const modifierRegex = new RegExp(`^[^${MODIFIER_DIVIDER}]+(?:${MODIFIER_DIVIDER}(?:preventDefault|stopPropagation|passive|nonpassive|capture|once|self))+$`);
+
+// Replace functions used to be in `svelte/internal`:
+function bubble(component, event) {
+    const callbacks = component.$$.callbacks[event.type];
+    if (callbacks) {
+        callbacks.slice().forEach(fn => fn.call(this, event));
+    }
+}
+function listen(node, event, handler, options) {
+    node.addEventListener(event, handler, options);
+    return () => node.removeEventListener(event, handler, options);
+}
+function prevent_default(handler) {
+	// ? return function (this, event) {
+	return function (event) {
+		event.preventDefault();
+		return handler.call(this, event);
+	};
+}
+function stop_propagation(handler) {
+	// ? return function (this, event) {
+	return function (event) {
+		event.stopPropagation();
+		return handler.call(this, event);
+	};
+v}
+
 /** Function for forwarding DOM events to the component's declaration */
 export function createEventForwarder(component, except = []) {
     // This is our pseudo $on function. It is defined on component mount.
diff --git a/dist/styles/theme/SvelteUIProvider/SvelteUIProvider.svelte b/dist/styles/theme/SvelteUIProvider/SvelteUIProvider.svelte
index f787933afe089f74b81ed0464519bf0f864a2df6..7109bf4d595c0f10f4aae8243d1e7c5ead1adc5f 100644
--- a/dist/styles/theme/SvelteUIProvider/SvelteUIProvider.svelte
+++ b/dist/styles/theme/SvelteUIProvider/SvelteUIProvider.svelte
@@ -1,5 +1,5 @@
 <script context="module">import { setContext } from 'svelte';
-import { beforeUpdate, get_current_component } from 'svelte/internal';
+import { beforeUpdate, onMount } from 'svelte';
 import { mergeTheme } from '../';
 import { useSvelteUITheme } from './default-theme';
 import { colorScheme } from './svelteui.stores';
@@ -8,6 +8,20 @@ import { createStyles, dark, NormalizeCSS, SvelteUIGlobalCSS } from '../../index
 import { createEventForwarder, useActions } from '../../../internal';
 </script>
 
+<svelte:options
+  customElement={{
+    tag: 'sui-svelte-ui-provider',
+    extend: (customElementConstructor) => {
+      return class extends customElementConstructor {
+        constructor() {
+          super();
+          this.component = this;  // replaces get_curren_component() removed from 'svelte/internal'
+        }
+      };
+    }
+  }}
+/>
+
 <script>export let use = [], className = '', element = undefined, theme = useSvelteUITheme(), styles = {}, defaultProps = {}, themeObserver = 'light', withNormalizeCSS = false, withGlobalStyles = false, override = {}, inherit = false;
 export { className as class };
 beforeUpdate(() => {
@@ -19,7 +33,9 @@ beforeUpdate(() => {
 });
 const ctx = useSvelteUIThemeContext();
 const useStyles = createStyles(() => ({ root: {} }));
-const forwardEvents = createEventForwarder(get_current_component());
+let component;
+let forwardEvents;
+onMount( async () => forwardEvents = createEventForwarder(component));
 const DEFAULT_THEME = useSvelteUITheme();
 let currentTheme = null;
 $: {
diff --git a/package.json b/package.json
index 27d95f889d0b008bb982d7fed2f8f878cd998d95..6bb9386f754da25e74a3fe679e7cbee516fc8f08 100644
--- a/package.json
+++ b/package.json
@@ -85,8 +85,8 @@
 		"prettier": "2.8.8",
 		"prettier-plugin-svelte": "2.10.0",
 		"sass": "1.62.1",
-		"svelte": "3.59.1",
-		"svelte-check": "3.3.2",
+		"svelte": "^5.0.0-next.1",
+		"svelte-check": "^3.6.0",
 		"svelte-loader": "3.1.7",
 		"svelte-preprocess": "5.0.3",
 		"svelte2tsx": "0.6.14",
